namespace Sxta.Rti1516.MetaFederation
{
    using System;

    using Hla.Rti1516;
    using Sxta.Rti1516.Reflection;
    using Sxta.Rti1516.Serializers.XrtiEncoding;
    using Sxta.Rti1516.BoostrapProtocol;
    using Sxta.Rti1516.Interactions;
    using Sxta.Rti1516.XrtiHandles;

    ///<summary>
    ///Autogenerated interaction and serializer registration Helper. 
    ///</summary>
    /// <author> Sxta1516.DynamicCompiler.DynamicCompiler from Meta-Federation Object Model </author>
    [HLAinteractionHelperAttribute(Name = "MetaFederationObjectModelInteractionHelper",
                                     FomName = "Meta-Federation Object Model", 
                                     Semantics = "A Listener Manager and serializer manager")]
    public class MetaFederationObjectModelInteractionHelper
    {
        InteractionManager manager;

        /// <summary>Constructor.</summary>
        /// <param name="interactionManager"> the run-time interaction manager</param>
        public MetaFederationObjectModelInteractionHelper(InteractionManager interactionManager)
        {
            Type objType;
            manager = interactionManager;
            XrtiSerializerManager serializerMngr = manager.SerializerManager;
            long handle;
            ObjectClassDescriptor ocd;

            ocd = manager.DescriptorManager.GetObjectClassDescriptor("HLAfederationExecution");
            handle = ((XRTIAttributeHandle)ocd.GetAttributeDescriptor("federationName").Handle).Identifier;
            serializerMngr.RegisterSerializer(null, handle, new HLAfederationExecutionPropertyfederationNameXrtiSerializer(serializerMngr));


            objType = typeof(HLAinteractionRootMessage);
            manager.AddReceiveInteractionDelegate(objType, "HLAinteractionRoot", new InteractionManager.ReceiveInteractionDelegate(this.ReceiveInteraction));
            handle = ((XRTIInteractionClassHandle)manager.DescriptorManager.GetInteractionClassDescriptor("HLAinteractionRoot").Handle).Identifier;
            serializerMngr.RegisterSerializer(objType, handle, new HLAinteractionRootMessageXrtiSerializer(serializerMngr));

            objType = typeof(HLAmetaFederationMessage);
            manager.AddReceiveInteractionDelegate(objType, "HLAmetaFederation", new InteractionManager.ReceiveInteractionDelegate(this.ReceiveInteraction));
            handle = ((XRTIInteractionClassHandle)manager.DescriptorManager.GetInteractionClassDescriptor("HLAmetaFederation").Handle).Identifier;
            serializerMngr.RegisterSerializer(objType, handle, new HLAmetaFederationMessageXrtiSerializer(serializerMngr));

            objType = typeof(HLAcreateFederationExecutionMessage);
            manager.AddReceiveInteractionDelegate(objType, "HLAcreateFederationExecution", new InteractionManager.ReceiveInteractionDelegate(this.ReceiveInteraction));
            handle = ((XRTIInteractionClassHandle)manager.DescriptorManager.GetInteractionClassDescriptor("HLAcreateFederationExecution").Handle).Identifier;
            serializerMngr.RegisterSerializer(objType, handle, new HLAcreateFederationExecutionMessageXrtiSerializer(serializerMngr));

            objType = typeof(HLAdestroyFederationExecutionMessage);
            manager.AddReceiveInteractionDelegate(objType, "HLAdestroyFederationExecution", new InteractionManager.ReceiveInteractionDelegate(this.ReceiveInteraction));
            handle = ((XRTIInteractionClassHandle)manager.DescriptorManager.GetInteractionClassDescriptor("HLAdestroyFederationExecution").Handle).Identifier;
            serializerMngr.RegisterSerializer(objType, handle, new HLAdestroyFederationExecutionMessageXrtiSerializer(serializerMngr));

            objType = typeof(HLAjoinFederationExecutionMessage);
            manager.AddReceiveInteractionDelegate(objType, "HLAjoinFederationExecution", new InteractionManager.ReceiveInteractionDelegate(this.ReceiveInteraction));
            handle = ((XRTIInteractionClassHandle)manager.DescriptorManager.GetInteractionClassDescriptor("HLAjoinFederationExecution").Handle).Identifier;
            serializerMngr.RegisterSerializer(objType, handle, new HLAjoinFederationExecutionMessageXrtiSerializer(serializerMngr));
        }

        /// <summary>Notifies the listener of a received interaction.</summary>
        /// <param name="msg"> the message of the received interaction</param>
        public void ReceiveInteraction(BaseInteractionMessage msg)
        {
            try
            {
                lock (manager.InteractionListeners)
                {
                    if (msg is HLAcreateFederationExecutionMessage)
                    {
                        foreach (IInteractionListener il in manager.InteractionListeners)
                        {
                            if (il is IMetaFederationObjectModelInteractionListener)
                                (il as IMetaFederationObjectModelInteractionListener).OnReceiveHLAcreateFederationExecution(msg as HLAcreateFederationExecutionMessage);
                            else
                                il.ReceiveInteraction(msg);
                        }
                    }
                    else if (msg is HLAdestroyFederationExecutionMessage)
                    {
                        foreach (IInteractionListener il in manager.InteractionListeners)
                        {
                            if (il is IMetaFederationObjectModelInteractionListener)
                                (il as IMetaFederationObjectModelInteractionListener).OnReceiveHLAdestroyFederationExecution(msg as HLAdestroyFederationExecutionMessage);
                            else
                                il.ReceiveInteraction(msg);
                        }
                    }
                    else if (msg is HLAjoinFederationExecutionMessage)
                    {
                        foreach (IInteractionListener il in manager.InteractionListeners)
                        {
                            if (il is IMetaFederationObjectModelInteractionListener)
                                (il as IMetaFederationObjectModelInteractionListener).OnReceiveHLAjoinFederationExecution(msg as HLAjoinFederationExecutionMessage);
                            else
                                il.ReceiveInteraction(msg);
                        }
                    }
                    else
                        foreach (IInteractionListener il in manager.InteractionListeners)
                        {
                            il.ReceiveInteraction(msg);
                        }
                }
            }
            catch(System.IO.IOException ioe)
            {
                throw new FederateInternalError(ioe.ToString());
            }

        }
    }
}
