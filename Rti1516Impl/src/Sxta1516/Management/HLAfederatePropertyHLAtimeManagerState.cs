using System;
using System.Collections.Generic;
using System.Text;

namespace Sxta.Rti1516.Management
{
    using System;
    using System.IO;
    using System.Collections.Generic;

    using Hla.Rti1516;
    using Sxta.Rti1516.Reflection;
    using Sxta.Rti1516.Interactions;

    using HlaEncodingReader = Sxta.Rti1516.Serializers.XrtiEncoding.HlaEncodingReader;
    using HlaEncodingWriter = Sxta.Rti1516.Serializers.XrtiEncoding.HlaEncodingWriter;
    using Sxta.Rti1516.Serializers.XrtiEncoding;

    ///<summary>
    ///Autogenerated Serializer Helper. Serializes and deserializes HLAfederate.HLAtimeManagerState
    ///parameters into and from HLA formats. 
    ///</summary>
    /// <author> Sxta.Rti1516.DynamicCompiler.DynamicCompiler from Management Object Model </author>
    public class HLAfederatePropertyHLAtimeManagerStateXrtiSerializer : BaseInteractionMessageXrtiSerializer
    {
        ///<summary>Constructor for the serializer of HLAfederate.HLAtimeManagerState property.
        /// </summary>
        public HLAfederatePropertyHLAtimeManagerStateXrtiSerializer(XrtiSerializerManager manager)
            : base(manager)
        {
        }

        ///<summary>
        /// Writes this HLAfederate.HLAtimeManagerState to the specified stream.
        ///</summary>
        ///<param name="writer"> the output stream to write to</param>
        ///<param name="HLAtimeManagerState"> the property to serialize</param>
        ///<exception cref="System.IO.IOException"> if an error occurs</exception>
        public override void Serialize(HlaEncodingWriter writer, object HLAtimeManagerState)
        {
            try
            {
                HLAtimeStateXrtiSerializer.Serialize(writer, (HLAtimeState)HLAtimeManagerState);
            }
            catch (IOException ioe)
            {
                throw new RTIinternalError(ioe.ToString());
            }

        }

        ///<summary>
        /// Reads and returns a HLAfederate.HLAtimeManagerState from the specified stream.
        ///</summary>
        ///<param name="reader"> the input stream to read from</param>
        ///<param name="dummy"> this parameter is not used</param>
        ///<returns> the decoded value</returns>
        ///<exception cref="System.IO.IOException"> if an error occurs</exception>
        public override object Deserialize(HlaEncodingReader reader, ref object dummy)
        {
            HLAtimeState decodedValue;
            try
            {
                decodedValue = HLAtimeStateXrtiSerializer.Deserialize(reader);
                return decodedValue;
            }
            catch (IOException ioe)
            {
                throw new FederateInternalError(ioe.ToString());
            }
        }
    }

    ///<summary>
    ///Autogenerated Serializer for enumerated data type. 
    ///</summary>
    /// <author> Sxta.Rti1516.DynamicCompiler.DynamicCompiler from Management Object Model </author>
    public sealed class HLAtimeStateXrtiSerializer
    {
        ///<summary> Reads and returns a HLAtimeState from the specified stream.</summary>
        ///<param name="reader"> the input stream to read from</param>
        ///<returns>return the decoded value</returns>
        ///<exception cref="IOException"> if an error occurs</exception>
        public static HLAtimeState Deserialize(HlaEncodingReader reader)
        {
            return (HLAtimeState)reader.ReadHLAinteger32BE();
        }

        ///<summary>Writes this HLAtimeState to the specified stream.</summary>
        ///<param name="writer"> the stream to write to</param>
        ///<exception cref="IOException"> if an error occurs</exception>
        public static void Serialize(HlaEncodingWriter writer, HLAtimeState val)
        {
            writer.WriteHLAinteger32BE((int)val);
        }
    }


}
