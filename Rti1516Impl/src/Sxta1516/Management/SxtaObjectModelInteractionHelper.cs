namespace Sxta.Rti1516.Management
{
    using System;

    using Hla.Rti1516;
    using Sxta.Rti1516.Reflection;
    using Sxta.Rti1516.Serializers.XrtiEncoding;
    using Sxta.Rti1516.BoostrapProtocol;
    using Sxta.Rti1516.Interactions;
    using Sxta.Rti1516.XrtiHandles;

    ///<summary>
    ///Autogenerated interaction and serializer registration Helper. 
    ///</summary>
    /// <author> ANGEL </author>
    [HLAinteractionHelperAttribute(Name = "SxtaObjectModelInteractionHelper",
                                   FomName = "Sxta Object Model",
                                   Semantics = "A Listener Manager and serializer manager")]
    public class SxtaObjectModelInteractionHelper
    {
        InteractionManager manager;

        /// <summary>Constructor.</summary>
        /// <param name="interactionManager"> the run-time interaction manager</param>
        public SxtaObjectModelInteractionHelper(InteractionManager interactionManager)
        {
            manager = interactionManager;
            XrtiSerializerManager serializerMngr = manager.SerializerManager;
            long handle;
            ObjectClassDescriptor ocd;

            ocd = manager.DescriptorManager.GetObjectClassDescriptor("Sxtafederate");

            handle = ((XRTIAttributeHandle)ocd.GetAttributeDescriptor("HLAisJoined").Handle).Identifier;
            serializerMngr.RegisterSerializer(null, handle, new SxtafederatePropertyHLAisJoinedXrtiSerializer(serializerMngr));

            handle = ((XRTIAttributeHandle)ocd.GetAttributeDescriptor("HLAfederationNameJoined").Handle).Identifier;
            serializerMngr.RegisterSerializer(null, handle, new SxtafederatePropertyHLAfederationNameJoinedXrtiSerializer(serializerMngr));

            handle = ((XRTIAttributeHandle)ocd.GetAttributeDescriptor("HLApendingTime").Handle).Identifier;
            serializerMngr.RegisterSerializer(null, handle, new SxtafederatePropertyHLApendingTimeXrtiSerializer(serializerMngr));

        }

        /// <summary>Notifies the listener of a received interaction.</summary>
        /// <param name="msg"> the message of the received interaction</param>
        public void ReceiveInteraction(BaseInteractionMessage msg)
        {
            try
            {
                foreach (IInteractionListener il in manager.InteractionListeners)
                {
                    il.ReceiveInteraction(msg);
                }
            }
            catch (System.IO.IOException ioe)
            {
                throw new FederateInternalError(ioe.ToString());
            }

        }
    }
}
