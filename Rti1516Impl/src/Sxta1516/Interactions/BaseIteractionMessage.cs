using System;
using System.Collections.Generic;

using Hla.Rti1516;
using Sxta.Rti1516.Serializers.XrtiEncoding;
using Sxta.Rti1516.Reflection;

using HLAEncodingReader = Sxta.Rti1516.Serializers.XrtiEncoding.HlaEncodingReader;
using HLAEncodingWriter = Sxta.Rti1516.Serializers.XrtiEncoding.HlaEncodingWriter;

namespace Sxta.Rti1516.Interactions
{
    ///<summary>
    /// Message for BaseInteraction iteraction : Root class of BOM interactions. 
    /// This code has been autogenerated by Dynamic Compiler and modified by hand
    /// DONT TOUCH THIS CODE!!
    /// 
    /// ANGEL: Sorry ;-)
    ///</summary>
    [HLAInteractionClass(Name = "BaseInteraction",
                    Sharing = Sxta.Rti1516.Reflection.HLAsharingType.Neither,
                    Order = Sxta.Rti1516.Reflection.HLAorderType.Receive,
                    Semantics = "Root class of BOM interactions.",
                    Dimensions = "NA",
                    Transportation = "HLAreliable")]
    public class BaseInteractionMessage
    {
        /// <summary>
        /// This code is added manually. 
        /// </summary>
        public static BaseInteractionMessage NullBaseInteractionMessage = new BaseInteractionMessage();

        //PATCH ANGEL: These properties allow to order simultaneous events
        long federateHandle;

        ///<summary>Federate handle.</summary> 
        [HLAInteractionParameter(Name = "federateHandle",
                                 Semantics = "Federate handle.",
                                 DataType = "HLAnormalizedHandle")]
        public long FederateHandle
        {
            get { return federateHandle; }
            set { federateHandle = value; }
        }

        long interactionIndex;

        ///<summary>Interaction Index.</summary> 
        [HLAInteractionParameter(Name = "interactionIndex",
                                 Semantics = "Interaction index.",
                                 DataType = "HLAnormalizedHandle")]
        public long InteractionIndex
        {
            get { return interactionIndex; }
            set { interactionIndex = value; }
        }
        // END PACH

        long federationExecutionHandle;

        ///<summary>Federation execution handle.</summary> 
        [HLAInteractionParameter(Name = "federationExecutionHandle",
                                 Semantics = "Federation execution handle.",
                                 DataType = "HLAnormalizedHandle")]
        public long FederationExecutionHandle
        {
            get { return federationExecutionHandle; }
            set { federationExecutionHandle = value; }
        }

        byte[] userSuppliedTag;

        ///<summary>User-supplied tag associated with the interaction.</summary>
        [HLAInteractionParameter(Name = "userSuppliedTag",
                                 Semantics = "User-supplied tag associated with the interaction.",
                                 DataType = "HLAopaqueData")]
        public byte[] UserSuppliedTag
        {
            get { return userSuppliedTag; }
            set { userSuppliedTag = value; }
        }

        long interactionClassHandle;

        ///<summary>Interaction class handle.</summary> 
        [HLAInteractionParameter(Name = "interactionClassHandle",
                                  Semantics = "Interaction class handle.",
                                  DataType = "HLAnormalizedHandle")]
        public long InteractionClassHandle
        {
            get { return interactionClassHandle; }
            set { interactionClassHandle = value; }
        }

        public void CopyTo(BaseInteractionMessage obj)
        {
            this.FederationExecutionHandle = obj.FederationExecutionHandle;
            this.UserSuppliedTag = obj.UserSuppliedTag;
            this.InteractionClassHandle = obj.InteractionClassHandle;
            this.FederateHandle = obj.FederateHandle;
            this.InteractionIndex = obj.InteractionIndex;
        }

        ///<summary> Returns a string representation of this HLAbootstrapInteractionPayload. </summary>
        ///<returns> a string representation of this HLAbootstrapInteractionPayload</returns>
        public override String ToString()
        {
            return "BaseInteractionMessage(" +
                     "FederationExecutionHandle: " + federationExecutionHandle + ", " + "InteractionIndex: " + interactionIndex + ", " +
                     "UserSuppliedTag: <" + (userSuppliedTag == null? "null" : BitConverter.ToString(userSuppliedTag)) + ">, " +
                     "InteractionClassHandle: " + interactionClassHandle +
                   ")";
        }
    }

    ///<summary>
    ///Serializes and deserializes BaseIteractionMessage objects into and
    ///from HLA formats. 
    ///</summary>
    /// <author> Sxta.Rti1516.Utilities.ProxyCompiler</author>
    public class BaseInteractionMessageXrtiSerializer : HlaXrtiBaseSerializer
    {
        public BaseInteractionMessageXrtiSerializer(XrtiSerializerManager manager)
            : base(manager)
        {
        }


        ///<summary>
        /// Writes this HLAparameterHandleValuePair to the specified stream.
        ///</summary>
        ///<param name="writer"> the output stream to write to</param>
        ///<param name="obj"> the object to serialize</param>
        ///<exception cref="IOException"> if an error occurs</exception>
        public override void Serialize(HlaEncodingWriter writer, object obj)
        {
            BaseInteractionMessage msg = obj as BaseInteractionMessage;
            writer.WriteHLAinteger64BE(msg.FederateHandle);
            writer.WriteHLAinteger64BE(msg.InteractionIndex);
            writer.WriteHLAinteger64BE(msg.FederationExecutionHandle);
            writer.WriteHLAopaqueData(msg.UserSuppliedTag);
            writer.WriteHLAinteger64BE(msg.InteractionClassHandle);
            IHlaEncodingSerializer serializer = serializerManager.GetSerializer(msg.InteractionClassHandle);
            if (serializer != null && !this.Equals(serializer))
            {
                serializer.Serialize(writer, obj);
            }
        }

        ///<summary>
        /// Reads and returns a BaseIteractionMessage from the specified stream.
        ///</summary>
        ///<param name="reader"> the input stream to read from</param>
        ///<returns> the decoded parameterValue</returns>
        ///<exception cref="System.IO.IOException"> if an error occurs</exception>
        public override object Deserialize(HlaEncodingReader reader, ref object msg)
        {
            if (msg == null)
            {
                msg = new BaseInteractionMessage();
            }
            BaseInteractionMessage decodedValue = msg as BaseInteractionMessage;
            decodedValue.FederateHandle = reader.ReadHLAinteger64BE();
            decodedValue.InteractionIndex = reader.ReadHLAinteger64BE();
            decodedValue.FederationExecutionHandle = reader.ReadHLAinteger64BE();
            decodedValue.UserSuppliedTag = reader.ReadHLAopaqueData();
            decodedValue.InteractionClassHandle = reader.ReadHLAinteger64BE();

            IHlaEncodingSerializer serializer = serializerManager.GetSerializer(decodedValue.InteractionClassHandle);

            if (serializer != null && !this.Equals(serializer))
            {
                object decodedValueTmp = decodedValue;
                return serializer.Deserialize(reader, ref decodedValueTmp);
            }
            else
                return decodedValue;
        }
    }
}
