namespace BoidsSample
{
    using System;
    using System.IO;

    using Hla.Rti1516;

    using Sxta.Rti1516.Serializers.XrtiEncoding;
    using Sxta.Rti1516.Reflection;
    using Sxta.Rti1516.Interactions;
    using Sxta.Rti1516.BoostrapProtocol;
    using Sxta.Rti1516.XrtiHandles;

    using Mogre;



    ///<summary>
    ///Serializes and deserializes Vector3 objects into and from HLA formats.
    ///</summary>
    /// <author> Sxta.Rti1516.DynamicCompiler.DynamicCompiler from Boids Object Model </author>
    public sealed class Vector3XrtiSerializer
    {
        ///<summary>
        /// Writes this Vector3 to the specified stream.
        ///</summary>
        ///<param name="writer"> the output stream to write to</param>
        ///<param name="obj"> the object to serialize</param>
        ///<exception cref="IOException"> if an error occurs</exception>
        public static void Serialize(HlaEncodingWriter writer, Vector3 obj)
        {
            writer.WriteHLAfloat32BE(obj.x);
            writer.WriteHLAfloat32BE(obj.y);
            writer.WriteHLAfloat32BE(obj.z);
        }


        ///<summary>
        /// Reads and returns a Vector3 from the specified stream.
        ///</summary>
        ///<param name="reader"> the input stream to read from</param>
        ///<returns> the decoded value</returns>
        ///<exception cref="IOException"> if an error occurs</exception>
        public static Vector3 Deserialize(HlaEncodingReader reader)
        {
            Vector3 decodedValue = new Vector3();

            decodedValue.x = reader.ReadHLAfloat32BE();
            decodedValue.y = reader.ReadHLAfloat32BE();
            decodedValue.z = reader.ReadHLAfloat32BE();
            return decodedValue;
        }

    }


    ///<summary>
    ///Autogenerated Serializer Helper. Serializes and deserializes Boid.Color
    ///parameters into and from HLA formats. 
    ///</summary>
    /// <author> Sxta.Rti1516.DynamicCompiler.DynamicCompiler from Boids Object Model </author>
    public class BoidPropertyColorXrtiSerializer : BaseInteractionMessageXrtiSerializer
    {
        ///<summary>Constructor for the serializer of Boid.Color property.
        /// </summary>
        public BoidPropertyColorXrtiSerializer(XrtiSerializerManager manager)
            : base(manager)
        {
        }

        ///<summary>
        /// Writes this Boid.Color to the specified stream.
        ///</summary>
        ///<param name="writer"> the output stream to write to</param>
        ///<param name="Color"> the property to serialize</param>
        ///<exception cref="System.IO.IOException"> if an error occurs</exception>
        public override void Serialize(HlaEncodingWriter writer, object Color)
        {
            try
            {
                writer.WriteHLAunicodeString((String)Color);
            }
            catch (IOException ioe)
            {
                throw new RTIinternalError(ioe.ToString());
            }

        }

        ///<summary>
        /// Reads and returns a Boid.Color from the specified stream.
        ///</summary>
        ///<param name="reader"> the input stream to read from</param>
        ///<param name="dummy"> this parameter is not used</param>
        ///<returns> the decoded value</returns>
        ///<exception cref="System.IO.IOException"> if an error occurs</exception>
        public override object Deserialize(HlaEncodingReader reader, ref object dummy)
        {
            String decodedValue;
            try
            {
                decodedValue = reader.ReadHLAunicodeString();
                return decodedValue;
            }
            catch (IOException ioe)
            {
                throw new FederateInternalError(ioe.ToString());
            }
        }
    }

    ///<summary>
    ///Autogenerated Serializer Helper. Serializes and deserializes Boid.Position
    ///parameters into and from HLA formats. 
    ///</summary>
    /// <author> Sxta.Rti1516.DynamicCompiler.DynamicCompiler from Boids Object Model </author>
    public class BoidPropertyPositionXrtiSerializer : BaseInteractionMessageXrtiSerializer
    {
        ///<summary>Constructor for the serializer of Boid.Position property.
        /// </summary>
        public BoidPropertyPositionXrtiSerializer(XrtiSerializerManager manager)
            : base(manager)
        {
        }

        ///<summary>
        /// Writes this Boid.Position to the specified stream.
        ///</summary>
        ///<param name="writer"> the output stream to write to</param>
        ///<param name="Position"> the property to serialize</param>
        ///<exception cref="System.IO.IOException"> if an error occurs</exception>
        public override void Serialize(HlaEncodingWriter writer, object Position)
        {
            try
            {
                Vector3XrtiSerializer.Serialize(writer, (Vector3)Position);
            }
            catch (IOException ioe)
            {
                throw new RTIinternalError(ioe.ToString());
            }

        }

        ///<summary>
        /// Reads and returns a Boid.Position from the specified stream.
        ///</summary>
        ///<param name="reader"> the input stream to read from</param>
        ///<param name="dummy"> this parameter is not used</param>
        ///<returns> the decoded value</returns>
        ///<exception cref="System.IO.IOException"> if an error occurs</exception>
        public override object Deserialize(HlaEncodingReader reader, ref object dummy)
        {
            Vector3 decodedValue;
            try
            {
                decodedValue = Vector3XrtiSerializer.Deserialize(reader);
                return decodedValue;
            }
            catch (IOException ioe)
            {
                throw new FederateInternalError(ioe.ToString());
            }
        }
    }

    ///<summary>
    ///Autogenerated Serializer Helper. Serializes and deserializes Boid.Velocity
    ///parameters into and from HLA formats. 
    ///</summary>
    /// <author> Sxta.Rti1516.DynamicCompiler.DynamicCompiler from Boids Object Model </author>
    public class BoidPropertyVelocityXrtiSerializer : BaseInteractionMessageXrtiSerializer
    {
        ///<summary>Constructor for the serializer of Boid.Velocity property.
        /// </summary>
        public BoidPropertyVelocityXrtiSerializer(XrtiSerializerManager manager)
            : base(manager)
        {
        }

        ///<summary>
        /// Writes this Boid.Velocity to the specified stream.
        ///</summary>
        ///<param name="writer"> the output stream to write to</param>
        ///<param name="Velocity"> the property to serialize</param>
        ///<exception cref="System.IO.IOException"> if an error occurs</exception>
        public override void Serialize(HlaEncodingWriter writer, object Velocity)
        {
            try
            {
                Vector3XrtiSerializer.Serialize(writer, (Vector3)Velocity);
            }
            catch (IOException ioe)
            {
                throw new RTIinternalError(ioe.ToString());
            }

        }

        ///<summary>
        /// Reads and returns a Boid.Velocity from the specified stream.
        ///</summary>
        ///<param name="reader"> the input stream to read from</param>
        ///<param name="dummy"> this parameter is not used</param>
        ///<returns> the decoded value</returns>
        ///<exception cref="System.IO.IOException"> if an error occurs</exception>
        public override object Deserialize(HlaEncodingReader reader, ref object dummy)
        {
            Vector3 decodedValue;
            try
            {
                decodedValue = Vector3XrtiSerializer.Deserialize(reader);
                return decodedValue;
            }
            catch (IOException ioe)
            {
                throw new FederateInternalError(ioe.ToString());
            }
        }
    }

    ///<summary>
    ///Autogenerated interaction and serializer registration Helper. 
    ///</summary>
    /// <author> Sxta.Rti1516.DynamicCompiler.DynamicCompiler from Boids Object Model </author>
    [HLAinteractionHelperAttribute(Name = "BoidsObjectModelInteractionHelper", Semantics = "A Listener Manager and serializer manager")]
    public class BoidsObjectModelInteractionHelper
    {
        InteractionManager manager;

        /// <summary>Constructor.</summary>
        /// <param name="interactionManager"> the run-time interaction manager</param>
        public BoidsObjectModelInteractionHelper(InteractionManager interactionManager)
        {
            Type objType;
            manager = interactionManager;
            XrtiSerializerManager serializerMngr = manager.SerializerManager;
            long handle;
            ObjectClassDescriptor ocd;


            ocd = manager.DescriptorManager.GetObjectClassDescriptor("Boid");
            handle = ((XRTIAttributeHandle)ocd.GetAttributeDescriptor("Color").Handle).Identifier;
            serializerMngr.RegisterSerializer(null, handle, new BoidPropertyColorXrtiSerializer(serializerMngr));

            handle = ((XRTIAttributeHandle)ocd.GetAttributeDescriptor("Position").Handle).Identifier;
            serializerMngr.RegisterSerializer(null, handle, new BoidPropertyPositionXrtiSerializer(serializerMngr));

            handle = ((XRTIAttributeHandle)ocd.GetAttributeDescriptor("Velocity").Handle).Identifier;
            serializerMngr.RegisterSerializer(null, handle, new BoidPropertyVelocityXrtiSerializer(serializerMngr));



        }

        /// <summary>Notifies the listener of a received interaction.</summary>
        /// <param name="msg"> the message of the received interaction</param>
        public void ReceiveInteraction(BaseInteractionMessage msg)
        {
            try
            {
                foreach (IInteractionListener il in manager.InteractionListeners)
                {
                    il.ReceiveInteraction(msg);
                }
            }
            catch (System.IO.IOException ioe)
            {
                throw new FederateInternalError(ioe.ToString());
            }

        }
    }
}
