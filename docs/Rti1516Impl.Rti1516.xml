<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rti1516</name>
    </assembly>
    <members>
        <member name="T:Hla.Rti1516.SynchronizationPointFailureReason">
            <summary> 
            Represents the reason for the failure of a synchronization point.
            </summary>
        </member>
        <member name="F:Hla.Rti1516.SynchronizationPointFailureReason.SYNCHRONIZATION_POINT_LABEL_NOT_UNIQUE">
            <summary> The synchronization point label is not unique.</summary>
        </member>
        <member name="F:Hla.Rti1516.SynchronizationPointFailureReason.SYNCHRONIZATION_SET_MEMBER_NOT_JOINED">
            <summary> A synchronization set member is not joined.</summary>
        </member>
        <member name="F:Hla.Rti1516.SynchronizationPointFailureReason.val">
            <summary> The value of the instance.</summary>
        </member>
        <member name="M:Hla.Rti1516.SynchronizationPointFailureReason.#ctor(Hla.Rti1516.SynchronizationPointFailureReason)">
            <summary> 
            Copy constructor.
            </summary>
            <param name="otherReason">the synchronization point failure reason object to copy
            </param>
        </member>
        <member name="M:Hla.Rti1516.SynchronizationPointFailureReason.#ctor(System.Int32)">
            <summary> 
            Private constructor.
            </summary>
            <param name="pValue">the integer value corresponding to this synchronization point failure
            reason
            </param>
        </member>
        <member name="M:Hla.Rti1516.SynchronizationPointFailureReason.Equals(System.Object)">
            <summary> 
            Compares this synchronization point failure reason for equality with another.
            </summary>
            <param name="otherReason">the other synchronization point failure reason
            </param>
            <returns> <code>true</code> if the two synchronization point failure reasons are equal,
            <code>false</code> otherwise
            </returns>
        </member>
        <member name="M:Hla.Rti1516.SynchronizationPointFailureReason.GetHashCode">
            <summary> 
            Computes and returns a hash code corresponding to this synchronization point failure
            reason.
            </summary>
            <returns> a hash code corresponding to this synchronization point failure reason
            </returns>
        </member>
        <member name="M:Hla.Rti1516.SynchronizationPointFailureReason.ToString">
            <summary> 
            Returns a string representation of this synchronization point failure reason.
            </summary>
            <returns> a string representation of this synchronization point failure reason
            </returns>
        </member>
        <member name="T:Hla.Rti1516.SaveNotInitiated">
            <summary>
             An exception indicating that a save operation has not been initiated.
            </summary>
        </member>
        <member name="T:Hla.Rti1516.RTIexception">
            <summary> 
            Superclass of all exceptions thrown by the run-time infrastructure.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.RTIexception.#ctor">
            <summary> 
            Initializes a new instance of the RTIexception class. 
            </summary>
        </member>
        <member name="M:Hla.Rti1516.RTIexception.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the RTIexception class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error. 
            </param>
        </member>
        <member name="M:Hla.Rti1516.RTIexception.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the RTIexception class with a specified error message and
            a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">a detailed description of the exception</param>
            <param name="inner"> The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="M:Hla.Rti1516.RTIexception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the RTIexception class with serialized data. 
            </summary>
            <param name="info">The <code>SerializationInfo</code> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <code>StreamingContext</code> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Hla.Rti1516.SaveNotInitiated.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.SaveFailureReason">
            <summary> 
            Represents the reason for the failure of a save operation.
            </summary>
        </member>
        <member name="F:Hla.Rti1516.SaveFailureReason.RTI_UNABLE_TO_SAVE">
            <summary> The run-time infrastructure was unable to save.</summary>
        </member>
        <member name="F:Hla.Rti1516.SaveFailureReason.FEDERATE_REPORTED_FAILURE">
            <summary> The federate reported a failure.</summary>
        </member>
        <member name="F:Hla.Rti1516.SaveFailureReason.FEDERATE_RESIGNED">
            <summary> The federate has resigned from the federation.</summary>
        </member>
        <member name="F:Hla.Rti1516.SaveFailureReason.RTI_DETECTED_FAILURE">
            <summary> The run-time infrastructure detected a failure.</summary>
        </member>
        <member name="F:Hla.Rti1516.SaveFailureReason.SAVE_TIME_CANNOT_BE_HONORED">
            <summary> The save time cannot be honored.</summary>
        </member>
        <member name="F:Hla.Rti1516.SaveFailureReason.val">
            <summary> The value of the instance.</summary>
        </member>
        <member name="M:Hla.Rti1516.SaveFailureReason.#ctor(Hla.Rti1516.SaveFailureReason)">
            <summary> 
            Copy constructor.
            </summary>
            <param name="otherSaveFailureReason">the save failure reason object to copy
            </param>
        </member>
        <member name="M:Hla.Rti1516.SaveFailureReason.#ctor(System.Int32)">
            <summary> 
            Private constructor.
            </summary>
            <param name="pValue">the integer value corresponding to this save failure reason
            </param>
        </member>
        <member name="M:Hla.Rti1516.SaveFailureReason.Equals(System.Object)">
            <summary> 
            Compares this save failure reason for equality with another.
            </summary>
            <param name="otherSaveFailureReason">the other save failure reason
            </param>
            <returns> <code>true</code> if the two save failure reasons are equal,
            <code>false</code> otherwise
            </returns>
        </member>
        <member name="M:Hla.Rti1516.SaveFailureReason.GetHashCode">
            <summary> 
            Computes and returns a hash code corresponding to this save failure reason.
            </summary>
            <returns> a hash code corresponding to this save failure reason
            </returns>
        </member>
        <member name="M:Hla.Rti1516.SaveFailureReason.ToString">
            <summary> 
            Returns a string representation of this save failure reason.
            </summary>
            <returns> a string representation of this save failure reason
            </returns>
        </member>
        <member name="T:Hla.Rti1516.ObjectClassRelevanceAdvisorySwitchIsOff">
            <summary> 
            An exception indicating that the object class relevance advisory switch is off.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.ObjectClassRelevanceAdvisorySwitchIsOff.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.NoRequestToEnableTimeConstrainedWasPending">
            <summary> 
            An exception indicating that no request to enable time-constrained mode was
            pending.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.NoRequestToEnableTimeConstrainedWasPending.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.InteractionClassNotSubscribed">
            <summary>
             An exception indicating that an interaction class was not subscribed.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.InteractionClassNotSubscribed.#ctor(System.String)">
            <summary>
             Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.InteractionClassNotRecognized">
            <summary> 
            An exception indicating that an interaction class was not recognized.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.InteractionClassNotRecognized.#ctor">
            <summary> 
            Initializes a new instance of the InteractionClassNotRecognized class. 
            </summary>
        </member>
        <member name="M:Hla.Rti1516.InteractionClassNotRecognized.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the InteractionClassNotRecognized class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error. 
            </param>
        </member>
        <member name="M:Hla.Rti1516.InteractionClassNotRecognized.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the InteractionClassNotRecognized class with a specified error message and
            a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">a detailed description of the exception</param>
            <param name="inner"> The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="M:Hla.Rti1516.InteractionClassNotRecognized.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the InteractionClassNotRecognized class with serialized data. 
            </summary>
            <param name="info">The <code>SerializationInfo</code> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <code>StreamingContext</code> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Hla.Rti1516.IllegalTimeArithmetic">
            <summary>
             An exception indicating illegal time arithmetic.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.IllegalTimeArithmetic.#ctor">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.TransportationType">
            <summary>
            This class defines the predefined types of transportation.
            An implementation is allowed to define new types of transportation.
            None of the predefined types of transportation shall be eliminated.
            </summary>
        </member>
        <member name="F:Hla.Rti1516.TransportationType.nextToAssign">
            <summary> The next value to assign for a new transportation type.</summary>
        </member>
        <member name="F:Hla.Rti1516.TransportationType.HLA_RELIABLE">
            <summary> The reliable transportation type.</summary>
        </member>
        <member name="F:Hla.Rti1516.TransportationType.HLA_BEST_EFFORT">
            <summary> The best-effort transportation type.</summary>
        </member>
        <member name="F:Hla.Rti1516.TransportationType.transportationValue">
            <summary> The value of the instance.</summary>
        </member>
        <member name="M:Hla.Rti1516.TransportationType.Decode(System.Byte[],System.Int32)">
            <summary> 
            Decodes a transportation type stored within the specified buffer and
            returns a corresponding <code>TransportationType</code> instance.
            </summary>
            <param name="buffer">the buffer in which the encoded value is stored
            </param>
            <param name="offset">the offset within the buffer at which the encoded
            value is located
            </param>
            <returns> an <code>TransportationType</code> corresponding to the decoded
            value
            </returns>
            <exception cref="T:Hla.Rti1516.CouldNotDecode"> if the transportation type could not be decoded
            </exception>
        </member>
        <member name="M:Hla.Rti1516.TransportationType.#ctor(Hla.Rti1516.TransportationType)">
            <summary>
             Copy constructor.
            </summary>
            <param name="otherTransportationType">the transportation type to copy
            </param>
        </member>
        <member name="M:Hla.Rti1516.TransportationType.#ctor(System.Int32)">
            <summary> 
            Private constructor.
            </summary>
            <param name="pValue">the integer value corresponding to this transportation type
            </param>
        </member>
        <member name="M:Hla.Rti1516.TransportationType.#ctor(System.String)">
            <summary> 
            Protected constructor.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.TransportationType.Equals(System.Object)">
            <summary> 
            Compares this transportation type for equality with another.
            </summary>
            <param name="otherTransportationType">the other transportation type
            </param>
            <returns> <code>true</code> if the two transportation types are equal,
            <code>false</code> otherwise
            </returns>
        </member>
        <member name="M:Hla.Rti1516.TransportationType.GetHashCode">
            <summary> 
            Computes and returns a hash code corresponding to this transportation type.
            </summary>
            <returns> a hash code corresponding to this transportation type
            </returns>
        </member>
        <member name="M:Hla.Rti1516.TransportationType.EncodedLength">
            <summary> 
            Returns the encoded length of this transportation type.
            </summary>
            <returns> the encoded length of this transportation type (in bytes)
            </returns>
        </member>
        <member name="M:Hla.Rti1516.TransportationType.Encode(System.Byte[],System.Int32)">
            <summary> 
            Encodes this transportation type, placing the result into the specified buffer.
            </summary>
            <param name="buffer">the buffer in which to place the encoded value
            </param>
            <param name="offset">the offset within the buffer at which to store the encoded
            value
            </param>
        </member>
        <member name="M:Hla.Rti1516.TransportationType.ToString">
            <summary> 
            Returns a string representation of this transportation type.
            </summary>
            <returns> a string representation of this transportation type
            </returns>
        </member>
        <member name="T:Hla.Rti1516.TimeRegulationAlreadyEnabled">
            <summary> 
            An exception indicating that time regulation is already enabled.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.TimeRegulationAlreadyEnabled.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.SynchronizationSetMemberNotJoined">
            <summary>
             An exception indicating that a synchronization set member has not joined.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.SynchronizationSetMemberNotJoined.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.MessageRetractionReturn">
            <summary> 
            Contains information concerning the validity of a message retraction
            handle.
            </summary>
        </member>
        <member name="F:Hla.Rti1516.MessageRetractionReturn.retractionHandleIsValid">
            <summary> Whether or not the message retraction handle is valid.</summary>
        </member>
        <member name="F:Hla.Rti1516.MessageRetractionReturn.handle">
            <summary> The message retraction handle.</summary>
        </member>
        <member name="M:Hla.Rti1516.MessageRetractionReturn.#ctor(System.Boolean,Hla.Rti1516.IMessageRetractionHandle)">
            <summary> 
            Constructor.
            </summary>
            <param name="pRetractionHandleIsValid">whether or not the message
            retraction handle is valid
            </param>
            <param name="pHandle">the message retraction handle
            </param>
        </member>
        <member name="T:Hla.Rti1516.IRTIambassador">
            <summary> 
            The principal interface of the run-time infrastructure.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.CreateFederationExecution(System.String,System.Uri)">
            <summary> 
            Creates a new federation execution.
            </summary>
            <param name="federationExecutionName">the name of the new federation execution
            </param>
            <param name="fdd">the location of the federation description document
            </param>
            <exception cref="T:Hla.Rti1516.FederationExecutionAlreadyExists"> if the execution already exists
            </exception>
            <exception cref="T:Hla.Rti1516.CouldNotOpenFDD"> if the federation description document could not
            be opened
            </exception>
            <exception cref="T:Hla.Rti1516.ErrorReadingFDD"> if an error occurred while reading the federation
            description document
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.DestroyFederationExecution(System.String)">
            <summary> 
            Destroys a federation execution.
            </summary>
            <param name="federationExecutionName">the name of the federation execution to destroy
            </param>
            <exception cref="T:Hla.Rti1516.FederatesCurrentlyJoined"> if federates are still participating in the
            execution
            </exception>
            <exception cref="T:Hla.Rti1516.FederationExecutionDoesNotExist"> if the federation execution does not
            exist
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.JoinFederationExecution(System.String,System.String,Hla.Rti1516.IFederateAmbassador,Hla.Rti1516.MobileFederateServices)">
            <summary> 
            Joins a federation execution.
            </summary>
            <param name="federateType">a string describing the federate's role in the federation
            </param>
            <param name="federationExecutionName">the name of the federation to join
            </param>
            <param name="federateReference">the federate ambassador object
            </param>
            <param name="serviceReferences">the federate's mobile services
            </param>
            <exception cref="T:Hla.Rti1516.FederateAlreadyExecutionMember"> if the federate is already a member of
            an execution
            </exception>
            <exception cref="T:Hla.Rti1516.FederationExecutionDoesNotExist"> if the federation execution does not
            exist
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.ResignFederationExecution(Hla.Rti1516.ResignAction)">
            <summary> 
            Resigns from the currently joined federation execution.
            </summary>
            <param name="resignAction">the action to take upon resigning
            </param>
            <exception cref="T:Hla.Rti1516.OwnershipAcquisitionPending"> if an ownership acquisition operation is
            pending
            </exception>
            <exception cref="T:Hla.Rti1516.FederateOwnsAttributes"> if the federate still owns attributes
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.EnableCallbacks">
            <summary> 
            Enables callbacks.
            </summary>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.DisableCallbacks">
            <summary> 
            Disables callbacks.
            </summary>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.EvokeCallback(System.Double)">
            <summary> 
            Performs a callback, notifying the federate of a pending messages through the
            federate ambassador interface.
            </summary>
            <param name="seconds">the number of seconds to wait before issuing the callback
            </param>
            <returns> <code>true</code> if more messages are pending, <code>false</code> otherwise
            </returns>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.EvokeMultipleCallbacks(System.Double,System.Double)">
            <summary> 
            Performs multiple callbacks over a specified time period, notifying the federate of
            pending messages through the federate ambassador interface.
            </summary>
            <param name="minimumTime">the number of seconds to wait before issuing the first callback
            </param>
            <param name="maximumTime">the maximum time to spend issuing callbacks
            </param>
            <returns> <code>true</code> if more messages are pending, <code>false</code> otherwise
            </returns>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.GetObjectClassHandle(System.String)">
            <summary> 
            Returns the object class handle associated with the specified name.
            </summary>
            <param name="theName">the name of the object class
            </param>
            <returns> the object class handle associated with the specified name
            </returns>
            <exception cref="T:Hla.Rti1516.NameNotFound"> if the name was not found
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.GetObjectClassName(Hla.Rti1516.IObjectClassHandle)">
            <summary> 
            Returns the name of the specified object class.
            </summary>
            <param name="theHandle">the handle of the object class
            </param>
            <returns> the name of the specified object class
            </returns>
            <exception cref="T:Hla.Rti1516.InvalidObjectClassHandle"> if the object class handle is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.GetAttributeHandle(Hla.Rti1516.IObjectClassHandle,System.String)">
            <summary> 
            Returns the attribute handle associated with the specified name.
            </summary>
            <param name="whichClass">the class with which the attribute is associated
            </param>
            <param name="theName">the name of the attribute
            </param>
            <returns> the attribute handle associated with the specified name
            </returns>
            <exception cref="T:Hla.Rti1516.InvalidObjectClassHandle"> if the object class handle is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.NameNotFound"> if the name was not found
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.GetAttributeName(Hla.Rti1516.IObjectClassHandle,Hla.Rti1516.IAttributeHandle)">
            <summary> 
            Returns the name of the specified attribute.
            </summary>
            <param name="whichClass">the class with which the attribute is associated
            </param>
            <param name="theHandle">the handle of the attribute
            </param>
            <returns> the name of the specified attribute
            </returns>
            <exception cref="T:Hla.Rti1516.InvalidObjectClassHandle"> if the object class handle is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.InvalidAttributeHandle"> if the attribute handle is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotDefined"> if the attribute is undefined
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.GetInteractionClassHandle(System.String)">
            <summary> 
            Returns the interaction handle associated with the specified name.
            </summary>
            <param name="theName">the name of the interaction class
            </param>
            <returns> the interaction class handle associated with the specified name
            </returns>
            <exception cref="T:Hla.Rti1516.NameNotFound"> if the name was not found
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.GetInteractionClassName(Hla.Rti1516.IInteractionClassHandle)">
            <summary> 
            Returns the name of the specified interaction class.
            </summary>
            <param name="theHandle">the handle of the interaction class
            </param>
            <returns> the name of the specified interaction class
            </returns>
            <exception cref="T:Hla.Rti1516.InvalidInteractionClassHandle"> if the interaction class handle is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.GetParameterHandle(Hla.Rti1516.IInteractionClassHandle,System.String)">
            <summary> 
            Returns the parameter handle associated with the specified name.
            </summary>
            <param name="whichClass">the interaction class with which the parameter is associated
            </param>
            <param name="theName">the name of the parameter
            </param>
            <returns> the parameter handle associated with the specified name
            </returns>
            <exception cref="T:Hla.Rti1516.InvalidInteractionClassHandle"> if the interaction class handle is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.NameNotFound"> if the name was not found
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.GetParameterName(Hla.Rti1516.IInteractionClassHandle,Hla.Rti1516.IParameterHandle)">
            <summary> 
            Returns the name of the specified parameter.
            </summary>
            <param name="whichClass">the interaction class with which the parameter is associated
            </param>
            <param name="theHandle">the handle of the parameter
            </param>
            <returns> the name of the specified parameter
            </returns>
            <exception cref="T:Hla.Rti1516.InvalidInteractionClassHandle"> if the interaction class handle is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.InvalidParameterHandle"> if the parameter handle is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.InteractionParameterNotDefined"> if the parameter is undefined
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.GetObjectInstanceHandle(System.String)">
            <summary> 
            Returns the object instance handle associated with the specified name.
            </summary>
            <param name="theName">the name of the object instance
            </param>
            <returns> the object instance handle associated with the name
            </returns>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance is unknown
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.GetObjectInstanceName(Hla.Rti1516.IObjectInstanceHandle)">
            <summary> 
            Returns the name of the specified object instance.
            </summary>
            <param name="theHandle">the handle of the object instance
            </param>
            <returns> the name of the specified object instance
            </returns>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance is unknown
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.GetDimensionHandle(System.String)">
            <summary> 
            Returns the dimension handle associated with the specified name.
            </summary>
            <param name="theName">the name of the dimension handle
            </param>
            <returns> the dimension handle associated with the specified name
            </returns>
            <exception cref="T:Hla.Rti1516.NameNotFound"> if the name was not found
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.GetDimensionName(Hla.Rti1516.IDimensionHandle)">
            <summary> 
            Returns the name associated with the specified dimension handle.
            </summary>
            <param name="theHandle">the dimension handle
            </param>
            <returns> the name associated with the specified dimension handle
            </returns>
            <exception cref="T:Hla.Rti1516.InvalidDimensionHandle"> if the specified dimension handle is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.GetDimensionUpperBound(Hla.Rti1516.IDimensionHandle)">
            <summary> 
            Returns the upper bound of the specified dimension.
            </summary>
            <param name="theHandle">the dimension handle
            </param>
            <returns> the upper bound of the specified dimension
            </returns>
            <exception cref="T:Hla.Rti1516.InvalidDimensionHandle"> if the specified dimension handle is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.GetAvailableDimensionsForClassAttribute(Hla.Rti1516.IObjectClassHandle,Hla.Rti1516.IAttributeHandle)">
            <summary> 
            Returns the set of available dimensions for a class attribute.
            </summary>
            <param name="whichClass">the object class with which the attribute is associated
            </param>
            <param name="theHandle">the attribute handle
            </param>
            <returns> the set of available dimensions for the attribute
            </returns>
            <exception cref="T:Hla.Rti1516.InvalidObjectClassHandle"> if the object class handle is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.InvalidAttributeHandle"> if the attribute handle is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotDefined"> if the attribute is undefined
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.GetKnownObjectClassHandle(Hla.Rti1516.IObjectInstanceHandle)">
            <summary> 
            Returns the class handle corresponding to the specified object.
            </summary>
            <param name="theObject">the object handle
            </param>
            <returns> the class handle corresponding to the specified object
            </returns>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance is unknown
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.GetAvailableDimensionsForInteractionClass(Hla.Rti1516.IInteractionClassHandle)">
            <summary> 
            Returns the set of available dimensions for an interaction class.
            </summary>
            <param name="theHandle">the interaction class handle
            </param>
            <returns> the set of available dimensions for the interaction class
            </returns>
            <exception cref="T:Hla.Rti1516.InvalidInteractionClassHandle"> if the interaction class handle is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.GetTransportationType(System.String)">
            <summary> 
            Returns the transportation type corresponding to the specified name.
            </summary>
            <param name="theName">the transportation type name
            </param>
            <returns> the transportation type corresponding to the specified name
            </returns>
            <exception cref="T:Hla.Rti1516.InvalidTransportationName"> if the transportation name is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.GetTransportationName(Hla.Rti1516.TransportationType)">
            <summary> 
            Returns the name corresponding to the specified transportation type.
            </summary>
            <param name="theType">the transportation type
            </param>
            <returns> the name corresponding to the specified transportation type
            </returns>
            <exception cref="T:Hla.Rti1516.InvalidTransportationType"> if the transportation type is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.GetOrderType(System.String)">
            <summary> 
            Returns the order type corresponding to the specified name.
            </summary>
            <param name="theName">the order type name
            </param>
            <returns> the order type corresponding to the specified name
            </returns>
            <exception cref="T:Hla.Rti1516.InvalidOrderName"> if the order name is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.GetOrderName(Hla.Rti1516.OrderType)">
            <summary> 
            Returns the name corresponding to the specified order type.
            </summary>
            <param name="theType">the order type
            </param>
            <returns> the name corresponding to the specified order type
            </returns>
            <exception cref="T:Hla.Rti1516.InvalidOrderType"> if the order type is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.EnableObjectClassRelevanceAdvisorySwitch">
            <summary> 
            Enables the object class relevance advisory switch.
            </summary>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.ObjectClassRelevanceAdvisorySwitchIsOn"> if the switch is already on
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.DisableObjectClassRelevanceAdvisorySwitch">
            <summary> 
            Disables the object class relevance advisory switch.
            </summary>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.ObjectClassRelevanceAdvisorySwitchIsOff">  if the switch is already off
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.EnableAttributeRelevanceAdvisorySwitch">
            <summary> 
            Enables the attribute relevance advisory switch.
            </summary>
            <exception cref="T:Hla.Rti1516.AttributeRelevanceAdvisorySwitchIsOn">  if the switch is already on
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.DisableAttributeRelevanceAdvisorySwitch">
            <summary> 
            Disables the attribute relevance advisory switch.
            </summary>
            <exception cref="T:Hla.Rti1516.AttributeRelevanceAdvisorySwitchIsOff">  if the switch is already off
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.EnableAttributeScopeAdvisorySwitch">
            <summary> 
            Enables the attribute scope advisory switch.
            </summary>
            <exception cref="T:Hla.Rti1516.AttributeScopeAdvisorySwitchIsOn">  if the switch is already on
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.DisableAttributeScopeAdvisorySwitch">
            <summary> 
            Disables the attribute scope advisory switch.
            </summary>
            <exception cref="T:Hla.Rti1516.AttributeScopeAdvisorySwitchIsOff">  if the switch is already off
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.EnableInteractionRelevanceAdvisorySwitch">
            <summary> 
            Enables the interaction relevance advisory switch.
            </summary>
            <exception cref="T:Hla.Rti1516.InteractionRelevanceAdvisorySwitchIsOn"> if the switch is already on
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.DisableInteractionRelevanceAdvisorySwitch">
            <summary> 
            Disables the interaction relevance advisory switch.
            </summary>
            <exception cref="T:Hla.Rti1516.InteractionRelevanceAdvisorySwitchIsOff"> if the switch is already off
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.GetDimensionHandleSet(Hla.Rti1516.IRegionHandle)">
            <summary> 
            Returns the dimension handle set corresponding to the specified region.
            </summary>
            <param name="region">the region handle
            </param>
            <returns> the dimension handle set corresponding to the specified region
            </returns>
            <exception cref="T:Hla.Rti1516.InvalidRegion"> if the specified region is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.GetRangeBounds(Hla.Rti1516.IRegionHandle,Hla.Rti1516.IDimensionHandle)">
            <summary> 
            Returns the range bounds on the specified region and dimension.
            </summary>
            <param name="region">the region handle
            </param>
            <param name="dimension">the dimension handle
            </param>
            <returns> the range bounds on the specified region and dimension
            </returns>
            <exception cref="T:Hla.Rti1516.InvalidRegion">  if the specified region is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.RegionDoesNotContainSpecifiedDimension">  if the region does not contain the
            dimension
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.SetRangeBounds(Hla.Rti1516.IRegionHandle,Hla.Rti1516.IDimensionHandle,Hla.Rti1516.RangeBounds)">
            <summary> 
            Sets the range bounds on the specified region and dimension.
            </summary>
            <param name="region">the region handle
            </param>
            <param name="dimension">the dimension handle
            </param>
            <param name="bounds">the new set of range bounds
            </param>
            <exception cref="T:Hla.Rti1516.InvalidRegion"> if the specified region is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.RegionNotCreatedByThisFederate"> if the specified region was not created by
            this federate
            </exception>
            <exception cref="T:Hla.Rti1516.RegionDoesNotContainSpecifiedDimension"> if the region does not contain the
            dimension
            </exception>
            <exception cref="T:Hla.Rti1516.InvalidRangeBound"> if one of the range bounds is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.NormalizeFederateHandle(Hla.Rti1516.IFederateHandle)">
            <summary> 
            Normalizes a federate handle, returning it in its equivalent normalized form.
            </summary>
            <param name="federateHandle">the federate handle to normalize
            </param>
            <returns> the federate handle in its equivalent normalized form
            </returns>
            <exception cref="T:Hla.Rti1516.InvalidFederateHandle"> if the supplied federate handle is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.NormalizeServiceGroup(Hla.Rti1516.ServiceGroup)">
            <summary> 
            Normalizes a service group, returning it in its equivalent normalized form.
            </summary>
            <param name="group">the service group to normalize
            </param>
            <returns> the service group in its equivalent normalized form
            </returns>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.PublishObjectClassAttributes(Hla.Rti1516.IObjectClassHandle,Hla.Rti1516.IAttributeHandleSet)">
            <summary> 
            Publishes the specified object class attributes.
            </summary>
            <param name="theClass">the object class associated with the attributes to be
            published
            </param>
            <param name="attributeList">the list of attributes to publish
            </param>
            <exception cref="T:Hla.Rti1516.ObjectClassNotDefined"> if the specified object class is not defined
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotDefined"> if one of the specified attributes is not defined
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.UnpublishObjectClass(Hla.Rti1516.IObjectClassHandle)">
            <summary> 
            Unpublishes the specified object class.
            </summary>
            <param name="theClass">the object class to unpublish
            </param>
            <exception cref="T:Hla.Rti1516.ObjectClassNotDefined"> if the specified object class is not defined
            </exception>
            <exception cref="T:Hla.Rti1516.OwnershipAcquisitionPending"> if an ownership acquisition operation is pending
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.UnpublishObjectClassAttributes(Hla.Rti1516.IObjectClassHandle,Hla.Rti1516.IAttributeHandleSet)">
            <summary> 
            Unpublishes the specified object class attributes.
            </summary>
            <param name="theClass">the object class associated with the attributes to be
            unpublished
            </param>
            <param name="attributeList">the list of attributes to unpublish
            </param>
            <exception cref="T:Hla.Rti1516.ObjectClassNotDefined"> if the specified object class is not defined
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotDefined"> if one of the specified attributes is not defined
            </exception>
            <exception cref="T:Hla.Rti1516.OwnershipAcquisitionPending"> if an ownership acquisition operation is pending
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.PublishInteractionClass(Hla.Rti1516.IInteractionClassHandle)">
            <summary> 
            Publishes the specified interaction class.
            </summary>
            <param name="theInteraction">the interaction class to publish
            </param>
            <exception cref="T:Hla.Rti1516.InteractionClassNotDefined">  if the specified interaction class is not defined
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.UnpublishInteractionClass(Hla.Rti1516.IInteractionClassHandle)">
            <summary> 
            Unpublishes the specified interaction class.
            </summary>
            <param name="theInteraction">the interaction class to unpublish
            </param>
            <exception cref="T:Hla.Rti1516.InteractionClassNotDefined">  if the specified interaction class is not defined
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.SubscribeObjectClassAttributes(Hla.Rti1516.IObjectClassHandle,Hla.Rti1516.IAttributeHandleSet)">
            <summary> 
            Subscribes to a set of object class attributes.
            </summary>
            <param name="theClass">the object class associated with the attributes to subscribe to
            </param>
            <param name="attributeList">the set of attributes to subscribe to
            </param>
            <exception cref="T:Hla.Rti1516.ObjectClassNotDefined"> if the specified object class is not defined
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotDefined"> if one of the specified attributes is not defined
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.SubscribeObjectClassAttributesPassively(Hla.Rti1516.IObjectClassHandle,Hla.Rti1516.IAttributeHandleSet)">
            <summary> 
            Passively subscribes to a set of object class attributes.
            </summary>
            <param name="theClass">the object class associated with the attributes to subscribe to
            </param>
            <param name="attributeList">the set of attributes to subscribe to
            </param>
            <exception cref="T:Hla.Rti1516.ObjectClassNotDefined"> if the specified object class is not defined
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotDefined"> if one of the specified attributes is not defined
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.UnsubscribeObjectClass(Hla.Rti1516.IObjectClassHandle)">
            <summary> 
            Unsubscribes from an object class.
            </summary>
            <param name="theClass">the object class to unsubscribe from
            </param>
            <exception cref="T:Hla.Rti1516.ObjectClassNotDefined"> if the specified object class is not defined
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.UnsubscribeObjectClassAttributes(Hla.Rti1516.IObjectClassHandle,Hla.Rti1516.IAttributeHandleSet)">
            <summary> 
            Unsubscribes from a set of object class attributes.
            </summary>
            <param name="theClass">the object class associated with the attributes to unsubscribe from
            </param>
            <param name="attributeList">the set of attributes to unsubscribe from
            </param>
            <exception cref="T:Hla.Rti1516.ObjectClassNotDefined"> if the specified object class is not defined
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotDefined"> if one of the specified attributes is not defined
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.SubscribeInteractionClass(Hla.Rti1516.IInteractionClassHandle)">
            <summary> 
            Subscribes to the specified interaction class.
            </summary>
            <param name="theClass">the interaction class to subscribe to
            </param>
            <exception cref="T:Hla.Rti1516.InteractionClassNotDefined">  if the interaction class is not defined
            </exception>
            <exception cref="T:Hla.Rti1516.FederateServiceInvocationsAreBeingReportedViaMOM">  if federate service
            invocations are being reported via the management object model
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.SubscribeInteractionClassPassively(Hla.Rti1516.IInteractionClassHandle)">
            <summary> 
            Passively subscribes to the specified interaction class.
            </summary>
            <param name="theClass">the interaction class to subscribe to
            </param>
            <exception cref="T:Hla.Rti1516.InteractionClassNotDefined">  if the interaction class is not defined
            </exception>
            <exception cref="T:Hla.Rti1516.FederateServiceInvocationsAreBeingReportedViaMOM">  if federate service
            invocations are being reported via the management object model
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.UnsubscribeInteractionClass(Hla.Rti1516.IInteractionClassHandle)">
            <summary> 
            Unsubscribes from the specified interaction class.
            </summary>
            <param name="theClass">the interaction class to unsubscribe from
            </param>
            <exception cref="T:Hla.Rti1516.InteractionClassNotDefined">  if the interaction class is not defined
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.ReserveObjectInstanceName(System.String)">
            <summary> 
            Reserves the specified object instance name.
            </summary>
            <param name="theObjectName">the object name to reserve
            </param>
            <exception cref="T:Hla.Rti1516.IllegalName">  if the name is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.RegisterObjectInstance(Hla.Rti1516.IObjectClassHandle)">
            <summary> 
            Registers a new instance of the specified object class.
            </summary>
            <param name="theClass">the class of the object to register
            </param>
            <exception cref="T:Hla.Rti1516.ObjectClassNotDefined"> if the specified object class is not defined
            </exception>
            <exception cref="T:Hla.Rti1516.ObjectClassNotPublished"> if the specified object class is not published
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.RegisterObjectInstance(Hla.Rti1516.IObjectClassHandle,System.String)">
            <summary> 
            Registers a new instance of the specified object class.
            </summary>
            <param name="theClass">the class of the object to register
            </param>
            <param name="theObjectName">the instance name for the new object
            </param>
            <exception cref="T:Hla.Rti1516.ObjectClassNotDefined"> if the specified object class is not defined
            </exception>
            <exception cref="T:Hla.Rti1516.ObjectClassNotPublished"> if the specified object class is not published
            </exception>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNameNotReserved"> if the instance name has not been reserved
            </exception>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNameInUse"> if the instance name is already in use
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.UpdateAttributeValues(Hla.Rti1516.IObjectInstanceHandle,Hla.Rti1516.IAttributeHandleValueMap,System.Byte[])">
            <summary> 
            Updates the attribute values associated with an object.
            </summary>
            <param name="theObject">the object whose attributes are to be updated
            </param>
            <param name="theAttributes">the attributes to update and their corresponding values
            </param>
            <param name="userSuppliedTag">a user-supplied tag to associate with the update
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance is unknown
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotDefined"> if one of the attributes is undefined
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotOwned"> if one of the attributes is not owned
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.UpdateAttributeValues(Hla.Rti1516.IObjectInstanceHandle,Hla.Rti1516.IAttributeHandleValueMap,System.Byte[],Hla.Rti1516.ILogicalTime)">
            <summary> 
            Updates the attribute values associated with an object.
            </summary>
            <param name="theObject">the object whose attributes are to be updated
            </param>
            <param name="theAttributes">the attributes to update and their corresponding values
            </param>
            <param name="userSuppliedTag">a user-supplied tag to associate with the update
            </param>
            <param name="theTime">the logical time associated with the update
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance is unknown
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotDefined"> if one of the attributes is undefined
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotOwned"> if one of the attributes is not owned
            </exception>
            <exception cref="T:Hla.Rti1516.InvalidLogicalTime"> if the supplied logical time is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.SendInteraction(Hla.Rti1516.IInteractionClassHandle,Hla.Rti1516.IParameterHandleValueMap,System.Byte[])">
            <summary> 
            Sends an interaction.
            </summary>
            <param name="theInteraction">the class of interaction to send
            </param>
            <param name="theParameters">the parameters of the interaction
            </param>
            <param name="userSuppliedTag">a user-supplied tag to associate with the interaction
            </param>
            <exception cref="T:Hla.Rti1516.InteractionClassNotPublished"> if the interaction class is not published
            </exception>
            <exception cref="T:Hla.Rti1516.InteractionClassNotDefined"> if the interaction class is undefined
            </exception>
            <exception cref="T:Hla.Rti1516.InteractionParameterNotDefined"> if one of the parameters is undefined
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.SendInteraction(Hla.Rti1516.IInteractionClassHandle,Hla.Rti1516.IParameterHandleValueMap,System.Byte[],Hla.Rti1516.ILogicalTime)">
            <summary> 
            Sends an interaction.
            </summary>
            <param name="theInteraction">the class of interaction to send
            </param>
            <param name="theParameters">the parameters of the interaction
            </param>
            <param name="userSuppliedTag">a user-supplied tag to associate with the interaction
            </param>
            <param name="theTime">the logical time associated with the interaction
            </param>
            <exception cref="T:Hla.Rti1516.InteractionClassNotPublished"> if the interaction class is not published
            </exception>
            <exception cref="T:Hla.Rti1516.InteractionClassNotDefined"> if the interaction class is undefined
            </exception>
            <exception cref="T:Hla.Rti1516.InteractionParameterNotDefined"> if one of the parameters is undefined
            </exception>
            <exception cref="T:Hla.Rti1516.InvalidLogicalTime"> if the supplied logical time is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.DeleteObjectInstance(Hla.Rti1516.IObjectInstanceHandle,System.Byte[])">
            <summary> 
            Deletes the specified object instance.
            </summary>
            <param name="objectHandle">the object to Delete
            </param>
            <param name="userSuppliedTag">a user-supplied tag to associate with the operation
            </param>
            <exception cref="T:Hla.Rti1516.DeletePrivilegeNotHeld"> if the Delete privilege is not held
            </exception>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance is unknown
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.DeleteObjectInstance(Hla.Rti1516.IObjectInstanceHandle,System.Byte[],Hla.Rti1516.ILogicalTime)">
            <summary> 
            Deletes the specified object instance.
            </summary>
            <param name="objectHandle">the object to Delete
            </param>
            <param name="userSuppliedTag">a user-supplied tag to associate with the operation
            </param>
            <param name="theTime">the logical time associated with the Delete operation
            </param>
            <exception cref="T:Hla.Rti1516.DeletePrivilegeNotHeld"> if the Delete privilege is not held
            </exception>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance is unknown
            </exception>
            <exception cref="T:Hla.Rti1516.InvalidLogicalTime"> if the supplied logical time is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.localDeleteObjectInstance(Hla.Rti1516.IObjectInstanceHandle)">
            <summary> Deletes the specified object instance locally.
            
            </summary>
            <param name="objectHandle">the object to Delete
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance is unknown
            </exception>
            <exception cref="T:Hla.Rti1516.FederateOwnsAttributes"> if the federate owns attributes of the object
            </exception>
            <exception cref="T:Hla.Rti1516.OwnershipAcquisitionPending"> if an ownership acquisition operation is pending
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.ChangeAttributeTransportationType(Hla.Rti1516.IObjectInstanceHandle,Hla.Rti1516.IAttributeHandleSet,Hla.Rti1516.TransportationType)">
            <summary> 
            Changes the transportation type associated with a set of attributes.
            </summary>
            <param name="theObject">the object with which the attributes are associated
            </param>
            <param name="theAttributes">the attributes to modify
            </param>
            <param name="theType">the new transportation type
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance is unknown
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotDefined"> if one of the attributes is undefined
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotOwned"> if one of the attributes is not owned
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.ChangeInteractionTransportationType(Hla.Rti1516.IInteractionClassHandle,Hla.Rti1516.TransportationType)">
            <summary> 
            Changes the transporation type associated with an interaction class.
            </summary>
            <param name="theClass">the interaction class to modify
            </param>
            <param name="theType">the new transportation type
            </param>
            <exception cref="T:Hla.Rti1516.InteractionClassNotDefined"> if the interaction class is undefined
            </exception>
            <exception cref="T:Hla.Rti1516.InteractionClassNotPublished"> if the interaction class is unpublished
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.RequestAttributeValueUpdate(Hla.Rti1516.IObjectInstanceHandle,Hla.Rti1516.IAttributeHandleSet,System.Byte[])">
            <summary> 
            Requests an attribute value update.
            </summary>
            <param name="theObject">the object with which the attributes are associated
            </param>
            <param name="theAttributes">the set of attributes to be updated
            </param>
            <param name="userSuppliedTag">a user-supplied tag to associated with the request
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance is unknown
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotDefined"> if one of the attributes is undefined
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.RequestAttributeValueUpdate(Hla.Rti1516.IObjectClassHandle,Hla.Rti1516.IAttributeHandleSet,System.Byte[])">
            <summary> 
            Requests an attribute value update.
            </summary>
            <param name="theClass">the class of objects with which the attributes are associated
            </param>
            <param name="theAttributes">the set of attributes to be updated
            </param>
            <param name="userSuppliedTag">a user-supplied tag to associated with the request
            </param>
            <exception cref="T:Hla.Rti1516.ObjectClassNotDefined"> if the specified object class is undefined
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotDefined"> if one of the attributes is undefined
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.UnconditionalAttributeOwnershipDivestiture(Hla.Rti1516.IObjectInstanceHandle,Hla.Rti1516.IAttributeHandleSet)">
            <summary> 
            Unconditionally divests ownership of a set of attributes.
            </summary>
            <param name="theObject">the object with which the attributes are associated
            </param>
            <param name="theAttributes">the set of attributes to divest ownership of
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance is unknown
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotDefined"> if one of the attributes is undefined
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotOwned"> if one of the attributes is not owned
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.NegotiatedAttributeOwnershipDivestiture(Hla.Rti1516.IObjectInstanceHandle,Hla.Rti1516.IAttributeHandleSet,System.Byte[])">
            <summary> 
            Performs a negotiated divestiture of ownership of a set of attributes.
            </summary>
            <param name="theObject">the object with which the attributes are associated
            </param>
            <param name="theAttributes">the set of attributes to divest ownership of
            </param>
            <param name="userSuppliedTag">a user-supplied tag to associate with the action
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance is unknown
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotDefined"> if one of the attributes is undefined
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotOwned"> if one of the attributes is not owned
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeAlreadyBeingDivested">  if one of the attributes is already being divested
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.ConfirmDivestiture(Hla.Rti1516.IObjectInstanceHandle,Hla.Rti1516.IAttributeHandleSet,System.Byte[])">
            <summary> 
            Confirms divestiture of ownership of a set of attributes.
            </summary>
            <param name="theObject">the object with which the attributes are associated
            </param>
            <param name="theAttributes">the set of attributes to confirm divestiture of ownership of
            </param>
            <param name="userSuppliedTag">a user-supplied tag to associate with the action
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance is unknown
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotDefined"> if one of the attributes is undefined
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotOwned"> if one of the attributes is not owned
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeDivestitureWasNotRequested"> if attribute divestiture was not requested
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.AttributeOwnershipAcquisition(Hla.Rti1516.IObjectInstanceHandle,Hla.Rti1516.IAttributeHandleSet,System.Byte[])">
            <summary> 
            Acquires ownership of a set of attributes.
            </summary>
            <param name="theObject">the object with which the attributes are associated
            </param>
            <param name="desiredAttributes">the set of attributes to acquire
            </param>
            <param name="userSuppliedTag">a user-supplied tag to associate with the action
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance is unknown
            </exception>
            <exception cref="T:Hla.Rti1516.ObjectClassNotPublished"> if the object class is not published
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotDefined"> if one of the attributes is undefined
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotPublished"> if one of the attributes is not published
            </exception>
            <exception cref="T:Hla.Rti1516.FederateOwnsAttributes"> if the federate already owns the attributes
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.AttributeOwnershipAcquisitionIfAvailable(Hla.Rti1516.IObjectInstanceHandle,Hla.Rti1516.IAttributeHandleSet)">
            <summary> 
            Acquires ownership of a set of attributes if they are available.
            </summary>
            <param name="theObject">the object with which the attributes are associated
            </param>
            <param name="desiredAttributes">the set of attributes to acquire
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance is unknown
            </exception>
            <exception cref="T:Hla.Rti1516.ObjectClassNotPublished"> if the object class is not published
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotDefined"> if one of the attributes is undefined
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotPublished"> if one of the attributes is not published
            </exception>
            <exception cref="T:Hla.Rti1516.FederateOwnsAttributes"> if the federate already owns the attributes
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeAlreadyBeingAcquired">  if one of the attributes is already being acquired
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.AttributeOwnershipDivestitureIfWanted(Hla.Rti1516.IObjectInstanceHandle,Hla.Rti1516.IAttributeHandleSet)">
            <summary> 
            Divests ownership of a set of attributes if wanted.
            </summary>
            <param name="theObject">the object with which the attributes are associated
            </param>
            <param name="theAttributes">the set of attributes to divest ownership of
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance is unknown
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotDefined"> if one of the attributes is undefined
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotOwned"> if one of the attributes is not owned
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.CancelNegotiatedAttributeOwnershipDivestiture(Hla.Rti1516.IObjectInstanceHandle,Hla.Rti1516.IAttributeHandleSet)">
            <summary> 
            Cancels a negotiated divestiture of ownership of a set of attributes.
            </summary>
            <param name="theObject">the object with which the attributes are associated
            </param>
            <param name="theAttributes">the set of attributes to divest ownership of
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance is unknown
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotDefined"> if one of the attributes is undefined
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotOwned"> if one of the attributes is not owned
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeDivestitureWasNotRequested"> if attribute divestiture was not requested
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.CancelAttributeOwnershipAcquisition(Hla.Rti1516.IObjectInstanceHandle,Hla.Rti1516.IAttributeHandleSet)">
            <summary> 
            Cancels the acquisition of ownership of a set of attributes.
            </summary>
            <param name="theObject">the object with which the attributes are associated
            </param>
            <param name="theAttributes">the set of attributes to divest ownership of
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance is unknown
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotDefined"> if one of the attributes is undefined
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeAlreadyOwned"> if one of the attributes is already owned
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeAcquisitionWasNotRequested"> if attribute acquisition was not requested
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.QueryAttributeOwnership(Hla.Rti1516.IObjectInstanceHandle,Hla.Rti1516.IAttributeHandle)">
            <summary> Requests information concerning the ownership of an attribute.
            
            </summary>
            <param name="theObject">the object with which the attribute is associated
            </param>
            <param name="theAttribute">the attribute of interest
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance is unknown
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotDefined"> if the attribute is undefined
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.IsAttributeOwnedByFederate(Hla.Rti1516.IObjectInstanceHandle,Hla.Rti1516.IAttributeHandle)">
            <summary> Checks whether a specified attribute is owned by the federate.
            
            </summary>
            <param name="theObject">the object with which the attribute is associated
            </param>
            <param name="theAttribute">the attribute of interest
            </param>
            <returns> <code>true</code> if the federate owns the specified attribute,
            <code>false</code> otherwise
            </returns>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance is unknown
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotDefined"> if the attribute is undefined
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.EnableTimeRegulation(Hla.Rti1516.ILogicalTimeInterval)">
            <summary> 
            Enables time regulation.
            </summary>
            <param name="theLookahead">the amount of lookahead to use
            </param>
            <exception cref="T:Hla.Rti1516.TimeRegulationAlreadyEnabled">  if time regulation is already enabled
            </exception>
            <exception cref="T:Hla.Rti1516.InvalidLookahead">  if the specified amount of lookahead is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.InTimeAdvancingState"> if the federation is in a time-advancing state
            </exception>
            <exception cref="T:Hla.Rti1516.RequestForTimeRegulationPending"> if a request for time regulation is pending
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.DisableTimeRegulation">
            <summary> 
            Disables time regulation.
            </summary>
            <exception cref="T:Hla.Rti1516.TimeRegulationIsNotEnabled">  if time regulation is already disabled
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.EnableTimeConstrained">
            <summary> 
            Enables time-constrained mode.
            </summary>
            <exception cref="T:Hla.Rti1516.TimeConstrainedAlreadyEnabled">  if time-constrained mode is already enabled
            </exception>
            <exception cref="T:Hla.Rti1516.InTimeAdvancingState"> if the federation is in a time-advancing state
            </exception>
            <exception cref="T:Hla.Rti1516.RequestForTimeConstrainedPending"> if a request for time-constrained mode is pending
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.DisableTimeConstrained">
            <summary>
             Disables time-constrained mode.
            </summary>
            <exception cref="T:Hla.Rti1516.TimeConstrainedIsNotEnabled"> if time-constrained mode is already disabled
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.TimeAdvanceRequest(Hla.Rti1516.ILogicalTime)">
            <summary> 
            Requests a time advance.
            </summary>
            <param name="theTime">the new logical time
            </param>
            <exception cref="T:Hla.Rti1516.InvalidLogicalTime"> if the specified logical time is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.LogicalTimeAlreadyPassed"> if the specified logical time already passed
            </exception>
            <exception cref="T:Hla.Rti1516.InTimeAdvancingState"> if the federation is in a time-advancing state
            </exception>
            <exception cref="T:Hla.Rti1516.RequestForTimeRegulationPending"> if a request for time regulation is pending
            </exception>
            <exception cref="T:Hla.Rti1516.RequestForTimeConstrainedPending"> if a request for time-constrained mode is pending
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.TimeAdvanceRequestAvailable(Hla.Rti1516.ILogicalTime)">
            <summary> 
            Requests a time advance if available.
            </summary>
            <param name="theTime">the new logical time
            </param>
            <exception cref="T:Hla.Rti1516.InvalidLogicalTime"> if the specified logical time is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.LogicalTimeAlreadyPassed"> if the specified logical time already passed
            </exception>
            <exception cref="T:Hla.Rti1516.InTimeAdvancingState"> if the federation is in a time-advancing state
            </exception>
            <exception cref="T:Hla.Rti1516.RequestForTimeRegulationPending"> if a request for time regulation is pending
            </exception>
            <exception cref="T:Hla.Rti1516.RequestForTimeConstrainedPending"> if a request for time-constrained mode is pending
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.NextMessageRequest(Hla.Rti1516.ILogicalTime)">
            <summary> 
            Requests the next message.
            </summary>
            <param name="theTime">the new logical time
            </param>
            <exception cref="T:Hla.Rti1516.InvalidLogicalTime"> if the specified logical time is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.LogicalTimeAlreadyPassed"> if the specified logical time already passed
            </exception>
            <exception cref="T:Hla.Rti1516.InTimeAdvancingState"> if the federation is in a time-advancing state
            </exception>
            <exception cref="T:Hla.Rti1516.RequestForTimeRegulationPending"> if a request for time regulation is pending
            </exception>
            <exception cref="T:Hla.Rti1516.RequestForTimeConstrainedPending"> if a request for time-constrained mode is pending
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.NextMessageRequestAvailable(Hla.Rti1516.ILogicalTime)">
            <summary> .
            Requests the next message if available
            </summary>
            <param name="theTime">the new logical time
            </param>
            <exception cref="T:Hla.Rti1516.InvalidLogicalTime"> if the specified logical time is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.LogicalTimeAlreadyPassed"> if the specified logical time already passed
            </exception>
            <exception cref="T:Hla.Rti1516.InTimeAdvancingState"> if the federation is in a time-advancing state
            </exception>
            <exception cref="T:Hla.Rti1516.RequestForTimeRegulationPending"> if a request for time regulation is pending
            </exception>
            <exception cref="T:Hla.Rti1516.RequestForTimeConstrainedPending"> if a request for time-constrained mode is pending
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.FlushQueueRequest(Hla.Rti1516.ILogicalTime)">
            <summary> 
            Requests a queue flush.
            </summary>
            <param name="theTime">the logical time
            </param>
            <exception cref="T:Hla.Rti1516.InvalidLogicalTime"> if the specified logical time is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.LogicalTimeAlreadyPassed"> if the specified logical time already passed
            </exception>
            <exception cref="T:Hla.Rti1516.InTimeAdvancingState"> if the federation is in a time-advancing state
            </exception>
            <exception cref="T:Hla.Rti1516.RequestForTimeRegulationPending"> if a request for time regulation is pending
            </exception>
            <exception cref="T:Hla.Rti1516.RequestForTimeConstrainedPending"> if a request for time-constrained mode is pending
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.EnableAsynchronousDelivery">
            <summary> 
            Enables asynchronous delivery.
            </summary>
            <exception cref="T:Hla.Rti1516.AsynchronousDeliveryAlreadyEnabled"> if asynchronous delivery is already enabled
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.DisableAsynchronousDelivery">
            <summary> 
            Disables asynchronous delivery.
            </summary>
            <exception cref="T:Hla.Rti1516.AsynchronousDeliveryAlreadyDisabled"> if asynchronous delivery is already disabled
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.QueryGALT">
            <summary> 
            Queries the greatest available logical time.
            </summary>
            <returns> the greatest available logical time
            </returns>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.QueryLogicalTime">
            <summary> 
            Queries the current logical time.
            </summary>
            <returns> the current logical time
            </returns>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.QueryLITS">
            <summary> 
            Queries the least incoming time stamp.
            </summary>
            <returns> the least incoming time stamp
            </returns>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.ModifyLookahead(Hla.Rti1516.ILogicalTimeInterval)">
            <summary> 
            Modifies the lookahead interval.
            </summary>
            <param name="theLookahead">the new lookahead interval.
            </param>
            <exception cref="T:Hla.Rti1516.TimeRegulationIsNotEnabled">  if time regulation is not enabled
            </exception>
            <exception cref="T:Hla.Rti1516.InvalidLookahead">  if the specified lookahead interval is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.InTimeAdvancingState"> if the federation is in a time-advancing state
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.QueryLookahead">
            <summary> 
            Queries the lookahead interval.
            </summary>
            <returns> the lookahead interval
            </returns>
            <exception cref="T:Hla.Rti1516.TimeRegulationIsNotEnabled">  if time regulation is not enabled
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.Retract(Hla.Rti1516.IMessageRetractionHandle)">
            <summary> 
            Retracts a message.
            </summary>
            <param name="theHandle">the handle of the message to Retract
            </param>
            <exception cref="T:Hla.Rti1516.InvalidMessageRetractionHandle">  if the message retraction handle is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.TimeRegulationIsNotEnabled">  if time regulation is not enabled
            </exception>
            <exception cref="T:Hla.Rti1516.MessageCanNoLongerBeRetracted">  if the message can no longer be retracted
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.ChangeAttributeOrderType(Hla.Rti1516.IObjectInstanceHandle,Hla.Rti1516.IAttributeHandleSet,Hla.Rti1516.OrderType)">
            <summary> 
            Changes the order type of a set of attributes.
            </summary>
            <param name="theObject">the object with which the attributes are associated
            </param>
            <param name="theAttributes">the set of attributes to modify
            </param>
            <param name="theType">the new order type
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the specified object instance is unknown
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotDefined"> if one of the attributes is undefined
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotOwned"> if one of the attributes is not owned
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.ChangeInteractionOrderType(Hla.Rti1516.IInteractionClassHandle,Hla.Rti1516.OrderType)">
            <summary> 
            Changes the order type of a class of interactions.
            </summary>
            <param name="theClass">the class of interactions to modify
            </param>
            <param name="theType">the new order type
            </param>
            <exception cref="T:Hla.Rti1516.InteractionClassNotDefined"> if the interaction class is undefined
            </exception>
            <exception cref="T:Hla.Rti1516.InteractionClassNotPublished"> if the interaction class is unpublished
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.CreateRegion(Hla.Rti1516.IDimensionHandleSet)">
            <summary> Creates a new region with the specified dimensions.
            
            </summary>
            <param name="dimensions">the set of dimensions for the region
            </param>
            <returns> a handle to the newly created region
            </returns>
            <exception cref="T:Hla.Rti1516.InvalidDimensionHandle"> if one of the dimension handles is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.CommitRegionModifications(Hla.Rti1516.IRegionHandleSet)">
            <summary> 
            Commits modifications to a set of regions.
            </summary>
            <param name="regions">the regions to commit
            </param>
            <exception cref="T:Hla.Rti1516.InvalidRegion"> if one of the specified regions is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.RegionNotCreatedByThisFederate"> if one of the regions was not created by
            this federate
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.DeleteRegion(Hla.Rti1516.IRegionHandle)">
            <summary> 
            Deletes a region.
            </summary>
            <param name="theRegion">the region to Delete
            </param>
            <exception cref="T:Hla.Rti1516.InvalidRegion"> if one of the specified regions is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.RegionNotCreatedByThisFederate"> if one of the regions was not created by
            this federate
            </exception>
            <exception cref="T:Hla.Rti1516.RegionInUseForUpdateOrSubscription">  if the region is in use for updates or
            subscription
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.RegisterObjectInstanceWithRegions(Hla.Rti1516.IObjectClassHandle,Hla.Rti1516.IAttributeSetRegionSetPairList)">
            <summary> 
            Registers an object instance with associated regions.
            </summary>
            <param name="theClass">the class of the object to register
            </param>
            <param name="attributesAndRegions">the list of attributes and associated regions
            </param>
            <exception cref="T:Hla.Rti1516.ObjectClassNotDefined"> if the object class is not defined
            </exception>
            <exception cref="T:Hla.Rti1516.ObjectClassNotPublished"> if the object class is not published
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotDefined"> if one of the attributes is not defined
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotPublished"> if one of the attributes is not published
            </exception>
            <exception cref="T:Hla.Rti1516.InvalidRegion"> if one of the regions is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.RegionNotCreatedByThisFederate"> if one of the regions was not created
            by this federate
            </exception>
            <exception cref="T:Hla.Rti1516.InvalidRegion">Context if the region context is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.RegisterObjectInstanceWithRegions(Hla.Rti1516.IObjectClassHandle,Hla.Rti1516.IAttributeSetRegionSetPairList,System.String)">
            <summary> Registers an object instance with associated regions.
            
            </summary>
            <param name="theClass">the class of the object to register
            </param>
            <param name="attributesAndRegions">the list of attributes and associated regions
            </param>
            <param name="theObject">the object name
            </param>
            <exception cref="T:Hla.Rti1516.ObjectClassNotDefined"> if the object class is not defined
            </exception>
            <exception cref="T:Hla.Rti1516.ObjectClassNotPublished"> if the object class is not published
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotDefined"> if one of the attributes is not defined
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotPublished"> if one of the attributes is not published
            </exception>
            <exception cref="T:Hla.Rti1516.InvalidRegion"> if one of the regions is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.RegionNotCreatedByThisFederate"> if one of the regions was not created
            by this federate
            </exception>
            <exception cref="T:Hla.Rti1516.InvalidRegion">Context if the region context is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNameNotReserved"> if the object instance name was not reserved
            </exception>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNameInUse"> if the object instance name is in use
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.AssociateRegionsForUpdates(Hla.Rti1516.IObjectInstanceHandle,Hla.Rti1516.IAttributeSetRegionSetPairList)">
            <summary> 
            Associates object attributes with regions for updates.
            </summary>
            <param name="theObject">the object with which the attributes are associated
            </param>
            <param name="attributesAndRegions">the list of attributes and associated regions
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance is unknown
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotDefined"> if one of the attributes is not defined
            </exception>
            <exception cref="T:Hla.Rti1516.RegionNotCreatedByThisFederate"> if one of the regions was not created
            by this federate
            </exception>
            <exception cref="T:Hla.Rti1516.InvalidRegion">Context if the region context is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.UnassociateRegionsForUpdates(Hla.Rti1516.IObjectInstanceHandle,Hla.Rti1516.IAttributeSetRegionSetPairList)">
            <summary> 
            Unassociates object attributes with regions for updates.
            </summary>
            <param name="theObject">the object with which the attributes are associated
            </param>
            <param name="attributesAndRegions">the list of attributes and associated regions
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance is unknown
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotDefined"> if one of the attributes is not defined
            </exception>
            <exception cref="T:Hla.Rti1516.RegionNotCreatedByThisFederate"> if one of the regions was not created
            by this federate
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.SubscribeObjectClassAttributesWithRegions(Hla.Rti1516.IObjectClassHandle,Hla.Rti1516.IAttributeSetRegionSetPairList)">
            <summary> 
            Subscribes to a set of object class attributes with associated regions.
            </summary>
            <param name="theClass">the object class with which the attributes are associated
            </param>
            <param name="attributesAndRegions">the list of attributes and associated regions
            </param>
            <exception cref="T:Hla.Rti1516.ObjectClassNotDefined"> if the object class is not defined
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotDefined"> if one of the attributes is not defined
            </exception>
            <exception cref="T:Hla.Rti1516.InvalidRegion"> if one of the regions is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.RegionNotCreatedByThisFederate"> if one of the regions was not created
            by this federate
            </exception>
            <exception cref="T:Hla.Rti1516.InvalidRegion">Context if the region context is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.SubscribeObjectClassAttributesPassivelyWithRegions(Hla.Rti1516.IObjectClassHandle,Hla.Rti1516.IAttributeSetRegionSetPairList)">
            <summary> 
            Passively subscribes to a set of object class attributes with associated regions.
            </summary>
            <param name="theClass">the object class with which the attributes are associated
            </param>
            <param name="attributesAndRegions">the list of attributes and associated regions
            </param>
            <exception cref="T:Hla.Rti1516.ObjectClassNotDefined"> if the object class is not defined
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotDefined"> if one of the attributes is not defined
            </exception>
            <exception cref="T:Hla.Rti1516.InvalidRegion"> if one of the regions is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.RegionNotCreatedByThisFederate"> if one of the regions was not created
            by this federate
            </exception>
            <exception cref="T:Hla.Rti1516.InvalidRegion">Context if the region context is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.UnsubscribeObjectClassAttributesWithRegions(Hla.Rti1516.IObjectClassHandle,Hla.Rti1516.IAttributeSetRegionSetPairList)">
            <summary> 
            Unsubscribes from a set of object class attributes with associated regions.
            </summary>
            <param name="theClass">the object class with which the attributes are associated
            </param>
            <param name="attributesAndRegions">the list of attributes and associated regions
            </param>
            <exception cref="T:Hla.Rti1516.ObjectClassNotDefined"> if the object class is not defined
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotDefined"> if one of the attributes is not defined
            </exception>
            <exception cref="T:Hla.Rti1516.InvalidRegion"> if one of the regions is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.RegionNotCreatedByThisFederate"> if one of the regions was not created
            by this federate
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.SubscribeInteractionClassWithRegions(Hla.Rti1516.IInteractionClassHandle,Hla.Rti1516.IRegionHandleSet)">
            <summary> 
            Subscribes to a class of interactions with associated regions.
            </summary>
            <param name="theClass">the interaction class to subscribe to
            </param>
            <param name="regions">the regions associated with the interaction class
            </param>
            <exception cref="T:Hla.Rti1516.InteractionClassNotDefined">  if the interaction class is not defined
            </exception>
            <exception cref="T:Hla.Rti1516.InvalidRegion"> if one of the regions is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.RegionNotCreatedByThisFederate"> if one of the regions was not created
            by this federate
            </exception>
            <exception cref="T:Hla.Rti1516.InvalidRegion">Context if the region context is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.FederateServiceInvocationsAreBeingReportedViaMOM">  if federate service
            invocations are being reported via the management object model
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.SubscribeInteractionClassPassivelyWithRegions(Hla.Rti1516.IInteractionClassHandle,Hla.Rti1516.IRegionHandleSet)">
            <summary> 
            Passively subscribes to a class of interactions with associated regions.
            </summary>
            <param name="theClass">the interaction class to subscribe to
            </param>
            <param name="regions">the regions associated with the interaction class
            </param>
            <exception cref="T:Hla.Rti1516.InteractionClassNotDefined">  if the interaction class is not defined
            </exception>
            <exception cref="T:Hla.Rti1516.InvalidRegion"> if one of the regions is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.RegionNotCreatedByThisFederate"> if one of the regions was not created
            by this federate
            </exception>
            <exception cref="T:Hla.Rti1516.InvalidRegion">Context if the region context is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.FederateServiceInvocationsAreBeingReportedViaMOM">  if federate service
            invocations are being reported via the management object model
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.UnsubscribeInteractionClassWithRegions(Hla.Rti1516.IInteractionClassHandle,Hla.Rti1516.IRegionHandleSet)">
            <summary> 
            Unsubscribes from a class of interactions with associated regions.
            </summary>
            <param name="theClass">the interaction class to unsubscribe from
            </param>
            <param name="regions">the regions associated with the interaction class
            </param>
            <exception cref="T:Hla.Rti1516.InteractionClassNotDefined">  if the interaction class is not defined
            </exception>
            <exception cref="T:Hla.Rti1516.InvalidRegion"> if one of the regions is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.RegionNotCreatedByThisFederate"> if one of the regions was not created
            by this federate
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.SendInteractionWithRegions(Hla.Rti1516.IInteractionClassHandle,Hla.Rti1516.IParameterHandleValueMap,Hla.Rti1516.IRegionHandleSet,System.Byte[])">
            <summary> 
            Sends an interaction with associated regions.
            </summary>
            <param name="theInteraction">the class of interaction to send
            </param>
            <param name="theParameters">the parameters of the interaction
            </param>
            <param name="regions">the regions associated with the interaction
            </param>
            <param name="userSuppliedTag">a user-supplied tag to associate with the interaction
            </param>
            <exception cref="T:Hla.Rti1516.InteractionClassNotDefined">  if the interaction class is undefined
            </exception>
            <exception cref="T:Hla.Rti1516.InteractionClassNotPublished">  if the interaction class is not published
            </exception>
            <exception cref="T:Hla.Rti1516.InteractionParameterNotDefined"> if one of the interaction parameters was
            undefined
            </exception>
            <exception cref="T:Hla.Rti1516.InvalidRegion"> if one of the regions was invalid
            </exception>
            <exception cref="T:Hla.Rti1516.RegionNotCreatedByThisFederate"> if one of the regions was not created by
            this federate
            </exception>
            <exception cref="T:Hla.Rti1516.InvalidRegion">Context if the region context is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.SendInteractionWithRegions(Hla.Rti1516.IInteractionClassHandle,Hla.Rti1516.IParameterHandleValueMap,Hla.Rti1516.IRegionHandleSet,System.Byte[],Hla.Rti1516.ILogicalTime)">
            <summary> 
            Sends an interaction with associated regions.
            </summary>
            <param name="theInteraction">the class of interaction to send
            </param>
            <param name="theParameters">the parameters of the interaction
            </param>
            <param name="regions">the regions associated with the interaction
            </param>
            <param name="userSuppliedTag">a user-supplied tag to associate with the interaction
            </param>
            <param name="theTime">the logical time of the interaction
            </param>
            <exception cref="T:Hla.Rti1516.InteractionClassNotDefined">  if the interaction class is undefined
            </exception>
            <exception cref="T:Hla.Rti1516.InteractionClassNotPublished">  if the interaction class is not published
            </exception>
            <exception cref="T:Hla.Rti1516.InteractionParameterNotDefined"> if one of the interaction parameters was
            undefined
            </exception>
            <exception cref="T:Hla.Rti1516.InvalidRegion"> if one of the regions was invalid
            </exception>
            <exception cref="T:Hla.Rti1516.RegionNotCreatedByThisFederate"> if one of the regions was not created by
            this federate
            </exception>
            <exception cref="T:Hla.Rti1516.InvalidRegion">Context if the region context is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.InvalidLogicalTime"> if the specified logical time is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.RequestAttributeValueUpdateWithRegions(Hla.Rti1516.IObjectClassHandle,Hla.Rti1516.IAttributeSetRegionSetPairList,System.Byte[])">
            <summary> 
            Requests an attribute value update with associated regions.
            </summary>
            <param name="theClass">the class with which the attributes are associated
            </param>
            <param name="attributesAndRegions">the attributes and their associated regions
            </param>
            <param name="userSuppliedTag">a user-supplied tag to associate with the request
            </param>
            <exception cref="T:Hla.Rti1516.ObjectClassNotDefined"> if the specified object class is undefined
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotDefined"> if one of the specified attributes is undefined
            </exception>
            <exception cref="T:Hla.Rti1516.InvalidRegion"> if one of the specified regions is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.RegionNotCreatedByThisFederate"> if one of the regions was not created
            by this federate
            </exception>
            <exception cref="T:Hla.Rti1516.InvalidRegion">Context if the region context is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.RegisterFederationSynchronizationPoint(System.String,System.Byte[])">
            <summary> 
            Registers a federation synchronization point.
            </summary>
            <param name="synchronizationPointLabel">the label of the synchronization point
            </param>
            <param name="userSuppliedTag">a user-supplied tag to associate with the operation
            </param>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.RegisterFederationSynchronizationPoint(System.String,System.Byte[],Hla.Rti1516.IFederateHandleSet)">
            <summary> 
            Registers a federation synchronization point.
            </summary>
            <param name="synchronizationPointLabel">the label of the synchronization point
            </param>
            <param name="userSuppliedTag">a user-supplied tag to associate with the operation
            </param>
            <param name="synchronizationSet">the set of federates to synchronize
            </param>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.SynchronizationPointAchieved(System.String)">
            <summary> 
            Notifies the run-time infrastructure that a synchronization point has been
            achieved.
            </summary>
            <param name="synchronizationPointLabel">the label of the achieved synchronization point
            </param>
            <exception cref="T:Hla.Rti1516.SynchronizationPointLabelNotAnnounced">  if the specified synchronization point
            label was not announced
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.RequestFederationSave(System.String)">
            <summary> 
            Requests that the federation perform a save operation.
            </summary>
            <param name="label">the label for the save point
            </param>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.RequestFederationSave(System.String,Hla.Rti1516.ILogicalTime)">
            <summary> 
            Requests that the federation perform a save operation.
            </summary>
            <param name="label">the label for the save point
            </param>
            <param name="theTime">the time at which to perform the save operation
            </param>
            <exception cref="T:Hla.Rti1516.LogicalTimeAlreadyPassed">  if the specified time has already passed
            </exception>
            <exception cref="T:Hla.Rti1516.InvalidLogicalTime"> if the specified time is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.FederateUnableToUseTime">  if the federate is unable to use time management
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.FederateSaveBegun">
            <summary> 
            Notifies the run-time infrastructure that the federate is beginning a save
            operation.
            </summary>
            <exception cref="T:Hla.Rti1516.SaveNotInitiated">if a federation save operation was not initiated
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.FederateSaveComplete">
            <summary> 
            Notifies the run-time infrastructure that the federate has completed its save
            operation.
            </summary>
            <exception cref="T:Hla.Rti1516.FederateHasNotBegunSave">if the federate never began its save operation
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.FederateSaveNotComplete">
            <summary> 
            Notifies the run-time infrastructure that the federate's save operation is not
            complete.
            </summary>
            <exception cref="T:Hla.Rti1516.FederateHasNotBegunSave">if the federate never began its save operation
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.QueryFederationSaveStatus">
            <summary> 
            Requests information from the run-time infrastructure concerning the federation's
            save status.
            </summary>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveNotInProgress"> if a save operation is not in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.RequestFederationRestore(System.String)">
            <summary> 
            Requests a federation restore operation.
            </summary>
            <param name="label">the label associated with the stored state to restore
            </param>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreInProgress"> if a restore operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.FederateRestoreComplete">
            <summary> 
            Notifies the run-time infrastructure that the federate's restore operation is
            complete.
            </summary>
            <exception cref="T:Hla.Rti1516.RestoreNotRequested">if a restore operation was not requested
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.FederateRestoreNotComplete">
            <summary> 
            Notifies the run-time infrastructure that the federate's restore operation is
            not complete.
            </summary>
            <exception cref="T:Hla.Rti1516.RestoreNotRequested">if a restore operation was not requested
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IRTIambassador.QueryFederationRestoreStatus">
            <summary> 
            Requests information from the run-time infrastructure concerning the restore status
            of the federation.
            </summary>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of an execution
            </exception>
            <exception cref="T:Hla.Rti1516.SaveInProgress"> if a save operation is in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RestoreNotInProgress">  if a restore operation is not in progress
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="P:Hla.Rti1516.IRTIambassador.HLAversion">
            <summary> 
            Returns the High Level Architecture specification version to which the
            run-time infrastructure conforms.
            </summary>
            <returns> the High Level Architecture specification version to which the
            run-time infrastructure conforms
            </returns>
        </member>
        <member name="P:Hla.Rti1516.IRTIambassador.AttributeHandleFactory">
            <summary> 
            Returns the run-time infrastructure's attribute handle factory.
            </summary>
            <returns> the run-time infrastructure's attribute handle factory
            </returns>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member
            of an execution
            </exception>
        </member>
        <member name="P:Hla.Rti1516.IRTIambassador.AttributeHandleSetFactory">
            <summary> 
            Returns the run-time infrastructure's attribute handle set factory.
            </summary>
            <returns> the run-time infrastructure's attribute handle set factory
            </returns>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member
            of an execution
            </exception>
        </member>
        <member name="P:Hla.Rti1516.IRTIambassador.AttributeHandleValueMapFactory">
            <summary> 
            Returns the run-time infrastructure's attribute handle value map factory.
            </summary>
            <returns> the run-time infrastructure's attribute handle value map factory
            </returns>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member
            of an execution
            </exception>
        </member>
        <member name="P:Hla.Rti1516.IRTIambassador.AttributeSetRegionSetPairListFactory">
            <summary> 
            Returns the run-time infrastructure's attribute set region set pair list factory.
            </summary>
            <returns> the run-time infrastructure's attribute set region set pair list factory
            </returns>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member
            of an execution
            </exception>
        </member>
        <member name="P:Hla.Rti1516.IRTIambassador.DimensionHandleFactory">
            <summary> 
            Returns the run-time infrastructure's dimension handle factory.
            </summary>
            <returns> the run-time infrastructure's dimension handle factory
            </returns>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member
            of an execution
            </exception>
        </member>
        <member name="P:Hla.Rti1516.IRTIambassador.DimensionHandleSetFactory">
            <summary> 
            Returns the run-time infrastructure's dimension handle set factory.
            </summary>
            <returns> the run-time infrastructure's dimension handlet set factory
            </returns>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member
            of an execution
            </exception>
        </member>
        <member name="P:Hla.Rti1516.IRTIambassador.FederateHandleFactory">
            <summary> 
            Returns the run-time infrastructure's federate handle factory.
            </summary>
            <returns> the run-time infrastructure's federate handle factory
            </returns>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member
            of an execution
            </exception>
        </member>
        <member name="P:Hla.Rti1516.IRTIambassador.FederateHandleSetFactory">
            <summary> 
            Returns the run-time infrastructure's federate handle set factory.
            </summary>
            <returns> the run-time infrastructure's federate handle set factory
            </returns>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member
            of an execution
            </exception>
        </member>
        <member name="P:Hla.Rti1516.IRTIambassador.InteractionClassHandleFactory">
            <summary> 
            Returns the run-time infrastructure's interaction class handle factory.
            </summary>
            <returns> the run-time infrastructure's interaction class handle factory
            </returns>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member
            of an execution
            </exception>
        </member>
        <member name="P:Hla.Rti1516.IRTIambassador.ObjectClassHandleFactory">
            <summary> 
            Returns the run-time infrastructure's object class handle factory.
            </summary>
            <returns> the run-time infrastructure's object class handle factory
            </returns>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member
            of an execution
            </exception>
        </member>
        <member name="P:Hla.Rti1516.IRTIambassador.ObjectInstanceHandleFactory">
            <summary> 
            Returns the run-time infrastructure's object instance handle factory.
            </summary>
            <returns> the run-time infrastructure's object instance handle factory
            </returns>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member
            of an execution
            </exception>
        </member>
        <member name="P:Hla.Rti1516.IRTIambassador.ParameterHandleFactory">
            <summary> 
            Returns the run-time infrastructure's parameter handle factory.
            </summary>
            <returns> the run-time infrastructure's parameter handle factory
            </returns>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member
            of an execution
            </exception>
        </member>
        <member name="P:Hla.Rti1516.IRTIambassador.ParameterHandleValueMapFactory">
            <summary> 
            Returns the run-time infrastructure's parameter handle value map factory.
            </summary>
            <returns> the run-time infrastructure's parameter handle value map factory
            </returns>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member
            of an execution
            </exception>
        </member>
        <member name="P:Hla.Rti1516.IRTIambassador.RegionHandleSetFactory">
            <summary> 
            Returns the run-time infrastructure's region handle set factory.
            </summary>
            <returns> the run-time infrastructure's region handle set factory
            </returns>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member
            of an execution
            </exception>
        </member>
        <member name="T:Hla.Rti1516.IRegionHandleSet">
            <summary> 
            A set of <code>IRegionHandle</code>s.
            </summary>
        </member>
        <member name="T:Hla.Rti1516.InvalidRangeBound">
            <summary> 
            An exception indicating an invalid range bound.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.InvalidRangeBound.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.IInteractionClassHandle">
            <summary> 
            Type-safe handle for an interaction class.  Generally these are created by the
            run-time infrastructure and passed to the user.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.IInteractionClassHandle.Equals(System.Object)">
            <summary> 
            Checks this interaction class handle for equality with another.
            </summary>
            <param name="otherInteractionClassHandle">the other interaction class handle to compare
            this to
            </param>
            <returns> <code>true</code> if this refers to the same interaction class as other handle,
            <code>false</code> otherwise
            </returns>
        </member>
        <member name="M:Hla.Rti1516.IInteractionClassHandle.GetHashCode">
            <summary> 
            Computes and returns a hash code corresponding to this interaction class.
            </summary>
            <returns> a hash code corresponding to this interaction class
            </returns>
        </member>
        <member name="M:Hla.Rti1516.IInteractionClassHandle.EncodedLength">
            <summary>
             Returns the encoded length of this interaction class handle.
            </summary>
            <returns> the encoded length of this interaction class handle (in bytes)
            </returns>
        </member>
        <member name="M:Hla.Rti1516.IInteractionClassHandle.Encode(System.Byte[],System.Int32)">
            <summary> 
            Encodes this interaction class handle, placing the result into the specified
            buffer.
            </summary>
            <param name="buffer">the buffer to contain the encoded value
            </param>
            <param name="offset">the offset within the buffer at which to store the value
            </param>
        </member>
        <member name="M:Hla.Rti1516.IInteractionClassHandle.ToString">
            <summary> 
            Returns a string representation of this interaction class handle.
            </summary>
            <returns> a string representation of this interaction class handle
            </returns>
        </member>
        <member name="T:Hla.Rti1516.FederationExecutionAlreadyExists">
            <summary>
             An exception indicating that the federation execution already exists.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.FederationExecutionAlreadyExists.#ctor">
            <summary> 
            Initializes a new instance of the FederationExecutionAlreadyExists class. 
            </summary>
        </member>
        <member name="M:Hla.Rti1516.FederationExecutionAlreadyExists.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the FederationExecutionAlreadyExists class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error. 
            </param>
        </member>
        <member name="M:Hla.Rti1516.FederationExecutionAlreadyExists.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the FederationExecutionAlreadyExists class with a specified error message and
            a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">a detailed description of the exception</param>
            <param name="inner"> The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="M:Hla.Rti1516.FederationExecutionAlreadyExists.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the FederationExecutionAlreadyExists class with serialized data. 
            </summary>
            <param name="info">The <code>SerializationInfo</code> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <code>StreamingContext</code> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Hla.Rti1516.FederateHandleSaveStatusPair">
            <summary>
             An object that contains a <code>IFederateHandle</code> and a
            <code>SaveStatus</code>.
            </summary>
        </member>
        <member name="F:Hla.Rti1516.FederateHandleSaveStatusPair.handle">
            <summary> The federate handle.</summary>
        </member>
        <member name="F:Hla.Rti1516.FederateHandleSaveStatusPair.status">
            <summary> The save status.</summary>
        </member>
        <member name="M:Hla.Rti1516.FederateHandleSaveStatusPair.#ctor(Hla.Rti1516.IFederateHandle,Hla.Rti1516.SaveStatus)">
            <summary>
             Constructor.
            </summary>
            <param name="pHandle">the federate handle
            </param>
            <param name="pStatus">the federate status
            </param>
        </member>
        <member name="P:Hla.Rti1516.FederateHandleSaveStatusPair.Handle">
            <summary> The federate handle.</summary>
        </member>
        <member name="P:Hla.Rti1516.FederateHandleSaveStatusPair.Status">
            <summary> The save status.</summary>
        </member>
        <member name="T:Hla.Rti1516.ObjectInstanceNameNotReserved">
            <summary>
             An exception indicating that an object instance name has not been reserved.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.ObjectInstanceNameNotReserved.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.NoRequestToEnableTimeRegulationWasPending">
            <summary> 
            An exception indicating that no request to enable time regulation was pending.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.NoRequestToEnableTimeRegulationWasPending.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.IFederateHandleFactory">
            <summary> 
            This factory is used only (outside of the RTI) to Create
            <code>IFederateHandle</code> objects corresponding to federate
            handles received as attribute or parameter values.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.IFederateHandleFactory.Decode(System.Byte[],System.Int32)">
            <summary> 
            Decodes a federate handle within the specified buffer and
            returns a corresponding <code>IFederateHandle</code> instance.
            </summary>
            <param name="buffer">the buffer from which to Decode the federate handle
            </param>
            <param name="offset">the offset within the buffer at which the encoded
            federate handle resides
            </param>
            <returns> the new <code>IFederateHandle</code> instance corresponding
            to the encoded handle
            </returns>
            <exception cref="T:Hla.Rti1516.CouldNotDecode"> if the federate handle could not be decoded
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member
            of the execution
            </exception>
        </member>
        <member name="T:Hla.Rti1516.FederateOwnsAttributes">
            <summary>
             An exception indicating that the federate owns the attributes.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.FederateOwnsAttributes.#ctor">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.CouldNotOpenFDD">
            <summary>
             An exception indicating a failure to open the federation description document.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.CouldNotOpenFDD.#ctor">
            <summary> 
            Initializes a new instance of the CouldNotOpenFDD class. 
            </summary>
        </member>
        <member name="M:Hla.Rti1516.CouldNotOpenFDD.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the CouldNotOpenFDD class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error. 
            </param>
        </member>
        <member name="M:Hla.Rti1516.CouldNotOpenFDD.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CouldNotOpenFDD class with a specified error message and
            a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">a detailed description of the exception</param>
            <param name="inner"> The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="M:Hla.Rti1516.CouldNotOpenFDD.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the CouldNotOpenFDD class with serialized data. 
            </summary>
            <param name="info">The <code>SerializationInfo</code> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <code>StreamingContext</code> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Hla.Rti1516.AttributeRelevanceAdvisorySwitchIsOn">
            <summary> 
            An exception thrown when the attribute relevance advisory switch is on.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.AttributeRelevanceAdvisorySwitchIsOn.#ctor">
            <summary> 
            Initializes a new instance of the AttributeRelevanceAdvisorySwitchIsOn class. 
            </summary>
        </member>
        <member name="M:Hla.Rti1516.AttributeRelevanceAdvisorySwitchIsOn.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the AttributeRelevanceAdvisorySwitchIsOn class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error. 
            </param>
        </member>
        <member name="M:Hla.Rti1516.AttributeRelevanceAdvisorySwitchIsOn.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the AttributeRelevanceAdvisorySwitchIsOn class with a specified error message and
            a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">a detailed description of the exception</param>
            <param name="inner"> The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="M:Hla.Rti1516.AttributeRelevanceAdvisorySwitchIsOn.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the AttributeRelevanceAdvisorySwitchIsOn class with serialized data. 
            </summary>
            <param name="info">The <code>SerializationInfo</code> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <code>StreamingContext</code> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Hla.Rti1516.RequestForTimeRegulationPending">
            <summary> 
            An exception indicating that a request for time regulation is pending.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.RequestForTimeRegulationPending.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.RegionDoesNotContainSpecifiedDimension">
            <summary> 
            An exception indicating that a region does not contain a specified dimension.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.RegionDoesNotContainSpecifiedDimension.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.IRegionHandle">
            <summary> 
            A type-safe handle for a region.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.IRegionHandle.Equals(System.Object)">
            <summary> 
            Checks this region handle for equality with another.
            </summary>
            <param name="otherRegionHandle">the other region handle
            </param>
            <returns> <code>true</code> if the two handles represent
            the same region, <code>false</code> otherwise
            </returns>
        </member>
        <member name="M:Hla.Rti1516.IRegionHandle.GetHashCode">
            <summary> 
            Computes and returns a hash code corresponding to this
            region handle.
            </summary>
            <returns> the hash code corresponding to this region handle
            </returns>
        </member>
        <member name="M:Hla.Rti1516.IRegionHandle.ToString">
            <summary> 
            Returns a string representation of this region handle.
            </summary>
            <returns> a string representation of this region handle
            </returns>
        </member>
        <member name="T:Hla.Rti1516.IDimensionHandleSetFactory">
            <summary> 
            A factory for <code>IDimensionHandleSet</code> instances.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.IDimensionHandleSetFactory.Create">
            <summary> 
            Creates and returns a new <code>IDimensionHandleSet</code>.
            </summary>
            <returns> the newly created <code>IDimensionHandleSet</code>
            </returns>
        </member>
        <member name="T:Hla.Rti1516.FederateInternalError">
            <summary> 
            An exception indicating an internal error in the federate.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.FederateInternalError.#ctor">
            <summary> 
            Initializes a new instance of the FederateInternalError class. 
            </summary>
        </member>
        <member name="M:Hla.Rti1516.FederateInternalError.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the FederateInternalError class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error. 
            </param>
        </member>
        <member name="M:Hla.Rti1516.FederateInternalError.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the FederateInternalError class with a specified error message and
            a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">a detailed description of the exception</param>
            <param name="inner"> The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="M:Hla.Rti1516.FederateInternalError.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the FederateInternalError class with serialized data. 
            </summary>
            <param name="info">The <code>SerializationInfo</code> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <code>StreamingContext</code> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Hla.Rti1516.CouldNotInitiateRestore">
            <summary> 
            An exception indicating a failure to initiate a restore operation.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.CouldNotInitiateRestore.#ctor">
            <summary> 
            Initializes a new instance of the CouldNotInitiateRestore class. 
            </summary>
        </member>
        <member name="M:Hla.Rti1516.CouldNotInitiateRestore.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the RTIeCouldNotInitiateRestorexception class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error. 
            </param>
        </member>
        <member name="M:Hla.Rti1516.CouldNotInitiateRestore.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CouldNotInitiateRestore class with a specified error message and
            a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">a detailed description of the exception</param>
            <param name="inner"> The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="M:Hla.Rti1516.CouldNotInitiateRestore.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the CouldNotInitiateRestore class with serialized data. 
            </summary>
            <param name="info">The <code>SerializationInfo</code> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <code>StreamingContext</code> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Hla.Rti1516.CouldNotDecode">
            <summary>
             An exception indicating a failure to Decode.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.CouldNotDecode.#ctor">
            <summary> 
            Initializes a new instance of the CouldNotDecode class. 
            </summary>
        </member>
        <member name="M:Hla.Rti1516.CouldNotDecode.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the CouldNotDecode class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error. 
            </param>
        </member>
        <member name="M:Hla.Rti1516.CouldNotDecode.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CouldNotDecode class with a specified error message and
            a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">a detailed description of the exception</param>
            <param name="inner"> The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="M:Hla.Rti1516.CouldNotDecode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the CouldNotDecode class with serialized data. 
            </summary>
            <param name="info">The <code>SerializationInfo</code> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <code>StreamingContext</code> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Hla.Rti1516.AttributeRegionAssociation">
            <summary> 
            An object that contains an <code>AttributeSet</code> and a
            <code>RegionSet</code>.
            </summary>
        </member>
        <member name="F:Hla.Rti1516.AttributeRegionAssociation.ahset">
            <summary> The attribute set.</summary>
        </member>
        <member name="F:Hla.Rti1516.AttributeRegionAssociation.rhset">
            <summary> The region set.</summary>
        </member>
        <member name="M:Hla.Rti1516.AttributeRegionAssociation.#ctor(Hla.Rti1516.IAttributeHandleSet,Hla.Rti1516.IRegionHandleSet)">
            <summary> 
            Constructor.
            </summary>
            <param name="pAHset">the attribute set
            </param>
            <param name="pRHset">the region set
            </param>
        </member>
        <member name="T:Hla.Rti1516.AttributeNotRecognized">
            <summary> 
            An exception thrown when an attribute is not recognized.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.AttributeNotRecognized.#ctor">
            <summary> 
            Initializes a new instance of the AttributeNotRecognized class. 
            </summary>
        </member>
        <member name="M:Hla.Rti1516.AttributeNotRecognized.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the AttributeNotRecognized class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error. 
            </param>
        </member>
        <member name="M:Hla.Rti1516.AttributeNotRecognized.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the AttributeNotRecognized class with a specified error message and
            a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">a detailed description of the exception</param>
            <param name="inner"> The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="M:Hla.Rti1516.AttributeNotRecognized.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the AttributeNotRecognized class with serialized data. 
            </summary>
            <param name="info">The <code>SerializationInfo</code> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <code>StreamingContext</code> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Hla.Rti1516.AttributeNotPublished">
            <summary> 
            An exception thrown when an attribute is not published.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.AttributeNotPublished.#ctor">
            <summary> 
            Initializes a new instance of the AttributeNotPublished class. 
            </summary>
        </member>
        <member name="M:Hla.Rti1516.AttributeNotPublished.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the AttributeNotPublished class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error. 
            </param>
        </member>
        <member name="M:Hla.Rti1516.AttributeNotPublished.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the AttributeNotPublished class with a specified error message and
            a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">a detailed description of the exception</param>
            <param name="inner"> The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="M:Hla.Rti1516.AttributeNotPublished.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the AttributeNotPublished class with serialized data. 
            </summary>
            <param name="info">The <code>SerializationInfo</code> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <code>StreamingContext</code> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Hla.Rti1516.AttributeNotOwned">
            <summary> 
            An exception thrown when an attribute is not owned.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.AttributeNotOwned.#ctor">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.AsynchronousDeliveryAlreadyEnabled">
            <summary>
             An exception thrown when asynchronous delivery is already enabled.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.AsynchronousDeliveryAlreadyEnabled.#ctor">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.UnknownName">
            <summary> 
            An exception indicating an unknown name.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.UnknownName.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.TimeConstrainedAlreadyEnabled">
            <summary> 
            An exception indicating that time-constrained mode has already been enabled.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.TimeConstrainedAlreadyEnabled.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.ServiceGroup">
            <summary> 
            Represents a service group.
            </summary>
        </member>
        <member name="F:Hla.Rti1516.ServiceGroup.FEDERATION_MANAGEMENT">
            <summary> The federation management service group.</summary>
        </member>
        <member name="F:Hla.Rti1516.ServiceGroup.DECLARATION_MANAGEMENT">
            <summary> The declaration management service group.</summary>
        </member>
        <member name="F:Hla.Rti1516.ServiceGroup.OBJECT_MANAGEMENT">
            <summary> The object management service group.</summary>
        </member>
        <member name="F:Hla.Rti1516.ServiceGroup.OWNERSHIP_MANAGEMENT">
            <summary> The ownership management service group.</summary>
        </member>
        <member name="F:Hla.Rti1516.ServiceGroup.TIME_MANAGEMENT">
            <summary> The time management service group.</summary>
        </member>
        <member name="F:Hla.Rti1516.ServiceGroup.DATA_DISTRIBUTION_MANAGEMENT">
            <summary> The data distribution management service group.</summary>
        </member>
        <member name="F:Hla.Rti1516.ServiceGroup.SUPPORT_SERVICES">
            <summary> The support services group.</summary>
        </member>
        <member name="F:Hla.Rti1516.ServiceGroup.val">
            <summary> The value of the instance.</summary>
        </member>
        <member name="M:Hla.Rti1516.ServiceGroup.#ctor(Hla.Rti1516.ServiceGroup)">
            <summary> 
            Copy constructor.
            </summary>
            <param name="otherServiceGroup">the service group object to copy
            </param>
        </member>
        <member name="M:Hla.Rti1516.ServiceGroup.#ctor(System.Int32)">
            <summary> 
            Private constructor.
            </summary>
            <param name="pValue">the integer value corresponding to this service group
            </param>
        </member>
        <member name="M:Hla.Rti1516.ServiceGroup.Equals(System.Object)">
            <summary> 
            Compares this service group for equality with another.
            </summary>
            <param name="otherServiceGroup">the other service group
            </param>
            <returns> <code>true</code> if the two service group objects are equal,
            <code>false</code> otherwise
            </returns>
        </member>
        <member name="M:Hla.Rti1516.ServiceGroup.GetHashCode">
            <summary> 
            Computes and returns a hash code corresponding to this service group.
            </summary>
            <returns> a hash code corresponding to this service group
            </returns>
        </member>
        <member name="M:Hla.Rti1516.ServiceGroup.ToString">
            <summary> 
            Returns a string representation of this service group.
            </summary>
            <returns> a string representation of this service group
            </returns>
        </member>
        <member name="T:Hla.Rti1516.RestoreInProgress">
            <summary> 
            An exception indicating that a restore operation is in progress.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.RestoreInProgress.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.RegionNotCreatedByThisFederate">
            <summary> 
            An exception indicating that a region was not created by this federate.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.RegionNotCreatedByThisFederate.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.ObjectClassNotPublished">
            <summary>
             An exception indicating that an object class is not published.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.ObjectClassNotPublished.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.InvalidInteractionClassHandle">
            <summary> 
            An exception indicating an invalid interaction class handle.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.InvalidInteractionClassHandle.#ctor">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.InTimeAdvancingState">
            <summary>
             An exception indicating that the federate is in a time-advancing state.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.InTimeAdvancingState.#ctor">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.InteractionClassNotPublished">
            <summary>
             An exception indicating that an interaction class was not published.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.InteractionClassNotPublished.#ctor">
            <summary> 
            Initializes a new instance of the InteractionClassNotPublished class. 
            </summary>
        </member>
        <member name="M:Hla.Rti1516.InteractionClassNotPublished.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the InteractionClassNotPublished class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error. 
            </param>
        </member>
        <member name="M:Hla.Rti1516.InteractionClassNotPublished.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the InteractionClassNotPublished class with a specified error message and
            a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">a detailed description of the exception</param>
            <param name="inner"> The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="M:Hla.Rti1516.InteractionClassNotPublished.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the InteractionClassNotPublished class with serialized data. 
            </summary>
            <param name="info">The <code>SerializationInfo</code> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <code>StreamingContext</code> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Hla.Rti1516.ILogicalTimeIntervalFactory">
            <summary> 
            A factory for <code>ILogicalTimeInterval</code>s.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.ILogicalTimeIntervalFactory.Decode(System.Byte[],System.Int32)">
            <summary> 
            Decodes a logical time interval stored within the specified
            buffer, returning a corresponding new <code>ILogicalTimeInterval</code>.
            </summary>
            <param name="buffer">the buffer containing the encoded interval
            </param>
            <param name="offset">the offset within the buffer at which the encoded
            interval is stored
            </param>
            <returns> a new <code>ILogicalTimeInterval</code> corresponding to the
            encoded interval
            </returns>
            <exception cref="T:Hla.Rti1516.CouldNotDecode"> if the time interval could not be decoded
            </exception>
        </member>
        <member name="M:Hla.Rti1516.ILogicalTimeIntervalFactory.MakeZero">
            <summary> 
            Creates and returns a zero-length logical time interval.
            </summary>
            <returns> a new zero-length <code>ILogicalTimeInterval</code>
            </returns>
        </member>
        <member name="M:Hla.Rti1516.ILogicalTimeIntervalFactory.MakeEpsilon">
            <summary> 
            Creates and returns an epsilon-length logical time interval.
            </summary>
            <returns> a new epsilon-length <code>ILogicalTimeInterval</code>
            </returns>
        </member>
        <member name="T:Hla.Rti1516.ILogicalTimeFactory">
            <summary> 
            A factory for <code>ILogicalTime</code>s.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.ILogicalTimeFactory.Decode(System.Byte[],System.Int32)">
            <summary> 
            Decodes a logical time stored within the specified buffer,
            returning a <code>ILogicalTime</code> object corresponding to
            the decoded value.
            </summary>
            <param name="buffer">the buffer that contains the encoded value
            </param>
            <param name="offset">the offset within the buffer at which the
            encoded value is stored
            </param>
            <returns> a new <code>ILogicalTime</code> representing the
            decoded value
            </returns>
            <exception cref="T:Hla.Rti1516.CouldNotDecode"> if the value could not be decoded
            </exception>
        </member>
        <member name="M:Hla.Rti1516.ILogicalTimeFactory.MakeInitial">
            <summary> 
            Creates and returns an instance of the initial logical time.
            </summary>
            <returns> an instance of the initial logical time
            </returns>
        </member>
        <member name="M:Hla.Rti1516.ILogicalTimeFactory.MakeFinal">
            <summary> 
            Creates and returns an instance of the final logical time.
            </summary>
            <returns> an instance of the final logical time
            </returns>
        </member>
        <member name="T:Hla.Rti1516.IAttributeSetRegionSetPairList">
            <summary> 
            This packages the attributes supplied to the RTI for various DDM services with
            the regions to be used with the attributes.  Elements are 
            <code>AttributeRegionAssociation</code>s.  All operations are required, none optional.
            Methods should throw <code>IllegalArgumentException</code> to enforce type of elements.
            </summary>
        </member>
        <member name="T:Hla.Rti1516.FederateServiceInvocationsAreBeingReportedViaMOM">
            <summary> 
            An exception indicating that federate service invocations are being reported
            via the management object model.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.FederateServiceInvocationsAreBeingReportedViaMOM.#ctor">
            <summary> 
            Initializes a new instance of the FederateServiceInvocationsAreBeingReportedViaMOM class. 
            </summary>
        </member>
        <member name="M:Hla.Rti1516.FederateServiceInvocationsAreBeingReportedViaMOM.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the FederateServiceInvocationsAreBeingReportedViaMOM class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error. 
            </param>
        </member>
        <member name="M:Hla.Rti1516.FederateServiceInvocationsAreBeingReportedViaMOM.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the FederateServiceInvocationsAreBeingReportedViaMOM class with a specified error message and
            a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">a detailed description of the exception</param>
            <param name="inner"> The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="M:Hla.Rti1516.FederateServiceInvocationsAreBeingReportedViaMOM.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the FederateServiceInvocationsAreBeingReportedViaMOM class with serialized data. 
            </summary>
            <param name="info">The <code>SerializationInfo</code> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <code>StreamingContext</code> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Hla.Rti1516.AttributeNotSubscribed">
            <summary>
             An exception thrown when an attribute is not subscribed.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.AttributeNotSubscribed.#ctor">
            <summary> 
            Initializes a new instance of the AttributeNotSubscribed class. 
            </summary>
        </member>
        <member name="M:Hla.Rti1516.AttributeNotSubscribed.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the AttributeNotSubscribed class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error. 
            </param>
        </member>
        <member name="M:Hla.Rti1516.AttributeNotSubscribed.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the AttributeNotSubscribed class with a specified error message and
            a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">a detailed description of the exception</param>
            <param name="inner"> The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="M:Hla.Rti1516.AttributeNotSubscribed.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the AttributeNotSubscribed class with serialized data. 
            </summary>
            <param name="info">The <code>SerializationInfo</code> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <code>StreamingContext</code> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Hla.Rti1516.AsynchronousDeliveryAlreadyDisabled">
            <summary>
             An exception thrown when asynchronous delivery is already disabled.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.AsynchronousDeliveryAlreadyDisabled.#ctor">
            <summary> 
            Initializes a new instance of the AsynchronousDeliveryAlreadyDisabled class. 
            </summary>
        </member>
        <member name="M:Hla.Rti1516.AsynchronousDeliveryAlreadyDisabled.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the AsynchronousDeliveryAlreadyDisabled class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error. 
            </param>
        </member>
        <member name="M:Hla.Rti1516.AsynchronousDeliveryAlreadyDisabled.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the AsynchronousDeliveryAlreadyDisabled class with a specified error message and
            a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">a detailed description of the exception</param>
            <param name="inner"> The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="M:Hla.Rti1516.AsynchronousDeliveryAlreadyDisabled.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the AsynchronousDeliveryAlreadyDisabled class with serialized data. 
            </summary>
            <param name="info">The <code>SerializationInfo</code> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <code>StreamingContext</code> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Hla.Rti1516.RegionInUseForUpdateOrSubscription">
            <summary> 
            An exception indicating that a region is in use for update or subscription.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.RegionInUseForUpdateOrSubscription.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.IParameterHandleValueMapFactory">
            <summary> 
            A factory for <code>IParameterHandleValueMap</code> instances.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.IParameterHandleValueMapFactory.Create(System.Int32)">
            <summary> Creates a new <code>IParameterHandleValueMap</code> instance with 
            the specified initial capacity.
            
            </summary>
            <param name="capacity">the initial map capacity
            </param>
            <returns> the newly created <code>IParameterHandleValueMap</code>
            </returns>
        </member>
        <member name="T:Hla.Rti1516.InvalidRegion">
            <summary> 
            An exception indicating an invalid region.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.InvalidRegion.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.InvalidMessageRetractionHandle">
            <summary> 
            An exception indicating an invalid message retraction handle.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.InvalidMessageRetractionHandle.#ctor">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.IAttributeSetRegionSetPairListFactory">
            <summary> 
            Factory for <code>IAttributeSetRegionSetPairList</code> instances.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.IAttributeSetRegionSetPairListFactory.Create(System.Int32)">
            <summary> 
            Creates and returns a new <code>IAttributeSetRegionSetPairList</code>
            instance with the specified initial capacity.
            </summary>
            <param name="capacity">the initial capacity of the list
            </param>
            <returns> the newly created list
            </returns>
        </member>
        <member name="T:Hla.Rti1516.IAttributeHandleSet">
            <summary> 
            All <code>Set</code> operations are required, none are optional.  
            Methods should throw
            <code>IllegalArgumentException</code> if the argument is not an
            <code>IAttributeHandle</code>.
            </summary>
        </member>
        <member name="T:Hla.Rti1516.AttributeScopeAdvisorySwitchIsOff">
            <summary> 
            An exception thrown when the attribute scope advisory switch is off.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.AttributeScopeAdvisorySwitchIsOff.#ctor(System.String)">
            <summary>
             Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.AttributeAlreadyOwned">
            <summary>
             An exception thrown when an attribute is already owned.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.AttributeAlreadyOwned.#ctor">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.SaveInProgress">
            <summary> 
            An exception indicating that a save operation is in progress.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.SaveInProgress.#ctor(System.String)">
            <summary>
             Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.LogicalTimeAlreadyPassed">
            <summary> 
            An exception indicating that a logical time already passed.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.LogicalTimeAlreadyPassed.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.IParameterHandleFactory">
            <summary> 
            A factory for <code>IParameterHandle</code>s.  This factory is used only
            (outside of the run-time infrastructure) to Create 
            <code>IParameterHandle</code>s received as attribute or parameter values.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.IParameterHandleFactory.Decode(System.Byte[],System.Int32)">
            <summary> 
            Decodes a parameter handle stored within the specified
            buffer.
            </summary>
            <param name="buffer">the buffer that contains the encoded parameter
            handle
            </param>
            <param name="offset">the offset within the buffer at which the
            parameter handle is stored
            </param>
            <returns> a <code>IParameterHandle</code> representing the
            decoded handle
            </returns>
            <exception cref="T:Hla.Rti1516.CouldNotDecode"> if the parameter handle could not be
            decoded
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not
            a member of the execution
            </exception>
        </member>
        <member name="T:Hla.Rti1516.InvalidParameterHandle">
            <summary> 
            An exception indicating an invalid parameter handle.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.InvalidParameterHandle.#ctor">
            <summary> 
            Initializes a new instance of the InvalidParameterHandle class. 
            </summary>
        </member>
        <member name="M:Hla.Rti1516.InvalidParameterHandle.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the InvalidParameterHandle class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error. 
            </param>
        </member>
        <member name="M:Hla.Rti1516.InvalidParameterHandle.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the InvalidParameterHandle class with a specified error message and
            a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">a detailed description of the exception</param>
            <param name="inner"> The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="M:Hla.Rti1516.InvalidParameterHandle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the InvalidParameterHandle class with serialized data. 
            </summary>
            <param name="info">The <code>SerializationInfo</code> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <code>StreamingContext</code> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Hla.Rti1516.InvalidLookahead">
            <summary> 
            An exception indicating an invalid lookahead.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.InvalidLookahead.#ctor">
            <summary> 
            Initializes a new instance of the InvalidLookahead class. 
            </summary>
        </member>
        <member name="M:Hla.Rti1516.InvalidLookahead.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the InvalidLookahead class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error. 
            </param>
        </member>
        <member name="M:Hla.Rti1516.InvalidLookahead.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the InvalidLookahead class with a specified error message and
            a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">a detailed description of the exception</param>
            <param name="inner"> The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="M:Hla.Rti1516.InvalidLookahead.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the InvalidLookahead class with serialized data. 
            </summary>
            <param name="info">The <code>SerializationInfo</code> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <code>StreamingContext</code> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Hla.Rti1516.IAttributeHandleValueMap">
            <summary> 
            Keys are <code>IAttributeHandle</code>s; values are <code>byte[]</code>.  All 
            operations are required, none optional.  Null mappings are not allowed.
            Methods <code>put</code>, <code>putAll</code>, and <code>Remove</code> should
            throw <code>IllegalArgumentException</code> to enforce types of keys and mappings.
            </summary>
        </member>
        <member name="T:Hla.Rti1516.AttributeAcquisitionWasNotRequested">
            <summary> 
            An exception thrown when attribute acquisition was not requested.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.AttributeAcquisitionWasNotRequested.#ctor">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.Extensions.IRtiAmbassadorExt">
            <summary> 
            An extended version of the <code>IRTIambassador</code> interface.
            </summary>
            <author>
            Agustin Santos. Based on code originally written by Andrzej Kapolka
            </author>
        </member>
        <member name="M:Hla.Rti1516.Extensions.IRtiAmbassadorExt.MergeFdd(System.Uri)">
            <summary> 
            Merges the object model contained in the specified federation
            description document with the current federation object model.
            </summary>
            <param name="fdd">the location of the federation description document
            </param>
            <exception cref="T:Hla.Rti1516.CouldNotOpenFDD"> if the federation description document could not
            be opened
            </exception>
            <exception cref="T:Hla.Rti1516.ErrorReadingFDD"> if an error occurred while reading the federation
            description document
            </exception>
            <exception cref="T:Hla.Rti1516.RTIinternalError"> if an internal error occurred in the
            run-time infrastructure
            </exception>
        </member>
        <member name="T:Hla.Rti1516.SynchronizationPointLabelNotAnnounced">
            <summary>
             An exception indicating that a synchronization point label was not announced.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.SynchronizationPointLabelNotAnnounced.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.RestoreNotInProgress">
            <summary> 
            An exception indicating that a restore operation is not in progress.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.RestoreNotInProgress.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.RegionNotKnown">
            <summary> 
            An exception indicating that a region is unknown.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.RegionNotKnown.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.OwnershipAcquisitionPending">
            <summary> 
            An exception indicating that ownership acquisition is pending.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.OwnershipAcquisitionPending.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.OrderType">
            <summary> 
            Represents a type of message ordering.
            </summary>
        </member>
        <member name="F:Hla.Rti1516.OrderType.RECEIVE">
            <summary> The receive-order type.</summary>
        </member>
        <member name="F:Hla.Rti1516.OrderType.TIMESTAMP">
            <summary> The timestamp-order type.</summary>
        </member>
        <member name="F:Hla.Rti1516.OrderType.val">
            <summary> The value of the instance.</summary>
        </member>
        <member name="M:Hla.Rti1516.OrderType.Decode(System.Byte[],System.Int32)">
            <summary> 
            Decodes an order type stored within the specified buffer and
            returns a corresponding <code>OrderType</code> instance.
            </summary>
            <param name="buffer">the buffer in which the encoded value is stored
            </param>
            <param name="offset">the offset within the buffer at which the encoded
            value is located
            </param>
            <returns> an <code>OrderType</code> corresponding to the decoded
            value
            </returns>
            <exception cref="T:Hla.Rti1516.CouldNotDecode"> if the order type could not be decoded
            </exception>
        </member>
        <member name="M:Hla.Rti1516.OrderType.#ctor(Hla.Rti1516.OrderType)">
            <summary> 
            Copy constructor.
            </summary>
            <param name="otherOrderType">the order type to copy
            </param>
        </member>
        <member name="M:Hla.Rti1516.OrderType.#ctor(Hla.Rti1516.OrderType.OrderTypeEnum)">
            <summary> 
            Private constructor.
            </summary>
            <param name="pValue">the enum value corresponding to this order type
            </param>
        </member>
        <member name="M:Hla.Rti1516.OrderType.Equals(System.Object)">
            <summary> 
            Compares this order type for equality with another.
            </summary>
            <param name="otherOrderType">the other order type
            </param>
            <returns> <code>true</code> if the two order types are equal,
            <code>false</code> otherwise
            </returns>
        </member>
        <member name="M:Hla.Rti1516.OrderType.GetHashCode">
            <summary> 
            Computes and returns a hash code corresponding to this order type.
            </summary>
            <returns> a hash code corresponding to this order type
            </returns>
        </member>
        <member name="M:Hla.Rti1516.OrderType.EncodedLength">
            <summary> 
            Returns the encoded length of this order type.
            </summary>
            <returns> the encoded length of this order type (in bytes)
            </returns>
        </member>
        <member name="M:Hla.Rti1516.OrderType.Encode(System.Byte[],System.Int32)">
            <summary> 
            Encodes this order type, placing the result into the specified buffer.
            </summary>
            <param name="buffer">the buffer in which to place the encoded value
            </param>
            <param name="offset">the offset within the buffer at which to store the encoded
            value
            </param>
        </member>
        <member name="M:Hla.Rti1516.OrderType.ToString">
            <summary> 
            Returns a string representation of this order type.
            </summary>
            <returns> a string representation of this order type
            </returns>
        </member>
        <member name="T:Hla.Rti1516.NameNotFound">
            <summary> 
            An exception indicating that a name was not found.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.NameNotFound.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.IRegionHandleSetFactory">
            <summary> 
            A factory for <code>IRegionHandleSet</code>s.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.IRegionHandleSetFactory.Create">
            <summary> 
            Creates and returns a new <code>IRegionHandleSet</code>.
            </summary>
            <returns> the newly created <code>IRegionHandleSet</code>
            </returns>
        </member>
        <member name="T:Hla.Rti1516.IParameterHandleValueMap">
            <summary> 
            Maps <code>IParameterHandle</code>s to <code>byte[]</code>s.  All operations
            are required, none optional.  Null mappings are not allowed.  Methods
            should throw <code>IllegalArgumentException</code> to enforce types of keys and mappings.
            </summary>
            <author>  
            DMSO
            </author>
        </member>
        <member name="T:Hla.Rti1516.IDimensionHandleSet">
            <summary>
            All <code>Set</code> operations are required, none are optional.
            Methods <code>Add</code> and <code>Remove</code> should throw
            <code>IllegalArgumentException</code> if the argument is not
            a <code>IDimensionHandle</code>.  Methods <code>addAll</code>,
            <code>RemoveAll</code> and <code>RetainAll</code> should throw
            <code>IllegalArgumentException</code> if the argument is not a
            <code>IDimensionHandleSet</code>.
            </summary>
        </member>
        <member name="T:Hla.Rti1516.IDimensionHandleFactory">
            <summary> 
            This factory is used only (outside of the RTI) to Create
            <code>IDimensionHandle</code>s received as attribute or parameter
            values.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.IDimensionHandleFactory.Decode(System.Byte[],System.Int32)">
            <summary> 
            Decodes a dimension handle within the specified buffer.
            </summary>
            <param name="buffer">the buffer containing the encoded handle
            </param>
            <param name="offset">the location of the handle within the buffer
            </param>
            <returns> the <code>IDimensionHandle</code> instance 
            corresponding to the decoded handle
            </returns>
            <exception cref="T:Hla.Rti1516.CouldNotDecode">  if the dimension handle could not
            be decoded
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember">  if the federate is not
            a member of the execution
            </exception>
        </member>
        <member name="T:Hla.Rti1516.IAttributeHandleValueMapFactory">
            <summary> 
            Factory for <code>IAttributeHandleValueMap</code> instances.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.IAttributeHandleValueMapFactory.Create(System.Int32)">
            <summary> .
            Creates a new <code>IAttributeHandleValueMap</code> with the
            specified initial capacity
            </summary>
            <param name="capacity">the initial capacity of the map
            </param>
            <returns> the newly created <code>AttributeHandleMap</code>
            </returns>
        </member>
        <member name="T:Hla.Rti1516.AttributeNotDefined">
            <summary> 
            An exception thrown when an attribute is not defined.
            </summary>
            <author>  
            DMSO
            </author>
        </member>
        <member name="M:Hla.Rti1516.AttributeNotDefined.#ctor">
            <summary> 
            Initializes a new instance of the AttributeNotDefined class. 
            </summary>
        </member>
        <member name="M:Hla.Rti1516.AttributeNotDefined.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the AttributeNotDefined class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error. 
            </param>
        </member>
        <member name="M:Hla.Rti1516.AttributeNotDefined.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the AttributeNotDefined class with a specified error message and
            a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">a detailed description of the exception</param>
            <param name="inner"> The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="M:Hla.Rti1516.AttributeNotDefined.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the AttributeNotDefined class with serialized data. 
            </summary>
            <param name="info">The <code>SerializationInfo</code> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <code>StreamingContext</code> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Hla.Rti1516.UnableToPerformSave">
            <summary> 
            An exception indicating the inability to perform a save operation.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.UnableToPerformSave.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.SaveNotInProgress">
            <summary>
             An exception indicating that a save operation is not in progress.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.SaveNotInProgress.#ctor(System.String)">
            <summary>
             Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.JoinedFederateIsNotInTimeAdvancingState">
            <summary> 
            An exception indicating that a joined federate is not in the time-advancing state.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.JoinedFederateIsNotInTimeAdvancingState.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.InvalidOrderType">
            <summary> 
            An exception indicating an invalid order type.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.InvalidOrderType.#ctor">
            <summary> 
            Initializes a new instance of the InvalidOrderType class. 
            </summary>
        </member>
        <member name="M:Hla.Rti1516.InvalidOrderType.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the InvalidOrderType class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error. 
            </param>
        </member>
        <member name="M:Hla.Rti1516.InvalidOrderType.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the InvalidOrderType class with a specified error message and
            a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">a detailed description of the exception</param>
            <param name="inner"> The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="M:Hla.Rti1516.InvalidOrderType.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the InvalidOrderType class with serialized data. 
            </summary>
            <param name="info">The <code>SerializationInfo</code> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <code>StreamingContext</code> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Hla.Rti1516.InvalidOrderName">
            <summary>
             An exception indicating an invalid order name.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.InvalidOrderName.#ctor">
            <summary> 
            Initializes a new instance of the InvalidOrderName class. 
            </summary>
        </member>
        <member name="M:Hla.Rti1516.InvalidOrderName.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the InvalidOrderName class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error. 
            </param>
        </member>
        <member name="M:Hla.Rti1516.InvalidOrderName.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the InvalidOrderName class with a specified error message and
            a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">a detailed description of the exception</param>
            <param name="inner"> The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="M:Hla.Rti1516.InvalidOrderName.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the InvalidOrderName class with serialized data. 
            </summary>
            <param name="info">The <code>SerializationInfo</code> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <code>StreamingContext</code> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Hla.Rti1516.IAttributeHandleFactory">
            <summary> 
            The factory is used only (outside of the RTI) to Create <code>IAttributeHandle</code>s
            received as attribute or parameter values.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.IAttributeHandleFactory.Decode(System.Byte[],System.Int32)">
            <summary> 
            Decodes an attribute handle, returning a new instance of
            <code>IAttributeHandle</code>.
            </summary>
            <param name="buffer">the encoded attribute handle
            </param>
            <param name="offset">the offset of the handle data in the buffer
            </param>
            <returns> an instance of <code>IAttributeHandle</code> corresponding
            to the encoded handle
            </returns>
            <exception cref="T:Hla.Rti1516.CouldNotDecode"> if the attribute handle could not be decoded
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member
            of the execution
            </exception>
        </member>
        <member name="T:Hla.Rti1516.FederateHandleRestoreStatusPair">
            <summary> 
            An object that contains a <code>IFederateHandle</code> and a
            <code>RestoreStatus</code>.
            </summary>
        </member>
        <member name="F:Hla.Rti1516.FederateHandleRestoreStatusPair.handle">
            <summary> The federate handle.</summary>
        </member>
        <member name="F:Hla.Rti1516.FederateHandleRestoreStatusPair.status">
            <summary> The restore status.</summary>
        </member>
        <member name="M:Hla.Rti1516.FederateHandleRestoreStatusPair.#ctor(Hla.Rti1516.IFederateHandle,Hla.Rti1516.RestoreStatus)">
            <summary> 
            Constructor.
            </summary>
            <param name="pHandle">the federate handle
            </param>
            <param name="pStatus">the restore status
            </param>
        </member>
        <member name="P:Hla.Rti1516.FederateHandleRestoreStatusPair.Handle">
            <summary> The federate handle.</summary>
        </member>
        <member name="P:Hla.Rti1516.FederateHandleRestoreStatusPair.Status">
            <summary> The restore status.</summary>
        </member>
        <member name="T:Hla.Rti1516.AttributeAcquisitionWasNotCanceled">
            <summary> 
            An exception thrown when attribute acquisition was not canceled.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.AttributeAcquisitionWasNotCanceled.#ctor">
            <summary> 
            Initializes a new instance of the AttributeAcquisitionWasNotCanceled class. 
            </summary>
        </member>
        <member name="M:Hla.Rti1516.AttributeAcquisitionWasNotCanceled.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the AttributeAcquisitionWasNotCanceled class with a
            specified error message. 
            </summary>
            <param name="message">The message that describes the error. 
            </param>
        </member>
        <member name="M:Hla.Rti1516.AttributeAcquisitionWasNotCanceled.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the AttributeAcquisitionWasNotCanceled class with a
            specified error message and
            a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">a detailed description of the exception</param>
            <param name="inner"> The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="M:Hla.Rti1516.AttributeAcquisitionWasNotCanceled.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the AttributeAcquisitionWasNotCanceled class with serialized data. 
            </summary>
            <param name="info">The <code>SerializationInfo</code> that holds the serialized object data
            about the exception being thrown.
            </param>
            <param name="context">The <code>StreamingContext</code> that contains contextual information
            about the source or destination.
            </param>
        </member>
        <member name="T:Hla.Rti1516.ObjectClassNotDefined">
            <summary> 
            An exception indicating that an object class is not defined.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.ObjectClassNotDefined.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.MessageCanNoLongerBeRetracted">
            <summary> 
            An exception indicating that a message can no longer be retracted.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.MessageCanNoLongerBeRetracted.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.InvalidDimensionHandle">
            <summary> 
            An exception indicating an invalid dimension handle.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.InvalidDimensionHandle.#ctor">
            <summary> 
            Initializes a new instance of the InvalidDimensionHandle class. 
            </summary>
        </member>
        <member name="M:Hla.Rti1516.InvalidDimensionHandle.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the InvalidDimensionHandle class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error. 
            </param>
        </member>
        <member name="M:Hla.Rti1516.InvalidDimensionHandle.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the InvalidDimensionHandle class with a specified error message and
            a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">a detailed description of the exception</param>
            <param name="inner"> The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="M:Hla.Rti1516.InvalidDimensionHandle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the InvalidDimensionHandle class with serialized data. 
            </summary>
            <param name="info">The <code>SerializationInfo</code> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <code>StreamingContext</code> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Hla.Rti1516.CouldNotDiscover">
            <summary> 
            An exception indicating a failure to discover.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.CouldNotDiscover.#ctor">
            <summary> 
            Initializes a new instance of the CouldNotDiscover class. 
            </summary>
        </member>
        <member name="M:Hla.Rti1516.CouldNotDiscover.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the CouldNotDiscover class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error. 
            </param>
        </member>
        <member name="M:Hla.Rti1516.CouldNotDiscover.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CouldNotDiscover class with a specified error message and
            a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">a detailed description of the exception</param>
            <param name="inner"> The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="M:Hla.Rti1516.CouldNotDiscover.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the CouldNotDiscover class with serialized data. 
            </summary>
            <param name="info">The <code>SerializationInfo</code> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <code>StreamingContext</code> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Hla.Rti1516.TimeRegulationIsNotEnabled">
            <summary> 
            An exception indicating that time regulation is not enabled.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.TimeRegulationIsNotEnabled.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.RequestForTimeConstrainedPending">
            <summary> 
            An exception indicating that a request for time-constrained mode is pending.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.RequestForTimeConstrainedPending.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.IParameterHandle">
            <summary> 
            Type-safe handle for a parameter.  Generally these are created by the
            run-time infrastructure and passed to the user.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.IParameterHandle.Equals(System.Object)">
            <summary> 
            Checks this parameter handle for equality with another.
            </summary>
            <param name="otherParameterHandle">the other parameter handle
            </param>
            <returns> <code>true</code> if the two handles represent the
            same parameter, <code>false</code> otherwise
            </returns>
        </member>
        <member name="M:Hla.Rti1516.IParameterHandle.GetHashCode">
            <summary> 
            Computes and returns a hash code corresponding to this parameter
            handle.
            </summary>
            <returns> a hash code corresponding to this parameter handle
            </returns>
        </member>
        <member name="M:Hla.Rti1516.IParameterHandle.EncodedLength">
            <summary> 
            Returns the encoded length of this parameter handle.
            </summary>
            <returns> the encoded length of this parameter handle (in bytes)
            </returns>
        </member>
        <member name="M:Hla.Rti1516.IParameterHandle.Encode(System.Byte[],System.Int32)">
            <summary> 
            Encodes this parameter handle and places the result in the specified
            buffer.
            </summary>
            <param name="buffer">the buffer to contain the encoded handle
            </param>
            <param name="offset">the offset within the buffer at which to store the
            encoded handle
            </param>
        </member>
        <member name="M:Hla.Rti1516.IParameterHandle.ToString">
            <summary> 
            Returns a string representation of this parameter handle.
            </summary>
            <returns> a string representation of this parameter handle
            </returns>
        </member>
        <member name="T:Hla.Rti1516.IObjectInstanceHandleFactory">
            <summary> 
            A factory for <code>IObjectInstanceHandle</code>s.  This factory is used only
            (outside of the run-time infrastructure) to Create
            <code>IObjectInstanceHandle</code>s received as attribute or parameter values.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.IObjectInstanceHandleFactory.Decode(System.Byte[],System.Int32)">
            <summary> 
            Decodes an object instance handle stored within the specified buffer,
            returning a new <code>IObjectInstanceHandle</code> instance representing
            the result.
            </summary>
            <param name="buffer">the buffer that contains the encoded value
            </param>
            <param name="offset">the offset within the buffer at which the encoded value
            resides
            </param>
            <returns> an <code>IObjectInstanceHandle</code> corresponding to the decoded
            value
            </returns>
            <exception cref="T:Hla.Rti1516.CouldNotDecode"> if the handle could not be decoded
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of
            the execution
            </exception>
        </member>
        <member name="T:Hla.Rti1516.IObjectClassHandleFactory">
            <summary> 
            A factory for <code>IObjectClassHandle</code>s.  This factory is used only
            (outside of the run-time infrastructure) to Create <code>IObjectClassHandle</code>s
            received as attribute or parameter values.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.IObjectClassHandleFactory.Decode(System.Byte[],System.Int32)">
            <summary> 
            Decodes an object class handle stored within the specified buffer.
            </summary>
            <param name="buffer">the buffer that contains the encoded handle
            </param>
            <param name="offset">the offset within the buffer at which the encoded
            handle is located
            </param>
            <returns> an <code>IObjectClassHandle</code> representing the decoded
            handle
            </returns>
            <exception cref="T:Hla.Rti1516.CouldNotDecode"> if the handle could not be decoded
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member
            of the execution
            </exception>
        </member>
        <member name="T:Hla.Rti1516.IObjectClassHandle">
            <summary> 
            Type-safe handle for an object class.  Generally these are created by the
            run-time infrastructure and passed to the user.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.IObjectClassHandle.Equals(System.Object)">
            <summary> 
            Checks this object class handle for equality with another.
            </summary>
            <param name="otherObjectClassHandle">the other object class handle
            </param>
            <returns> <code>true</code> if the object class handles refer
            to the same object class, <code>false</code> otherwise
            </returns>
        </member>
        <member name="M:Hla.Rti1516.IObjectClassHandle.GetHashCode">
            <summary> 
            Computes and returns a hash code corresponding to this object
            class handle.
            </summary>
            <returns> a hash code corresponding to this object class handle
            </returns>
        </member>
        <member name="M:Hla.Rti1516.IObjectClassHandle.EncodedLength">
            <summary> 
            Returns the encoded length of this object class handle.
            </summary>
            <returns> the encoded length of this object class handle (in bytes)
            </returns>
        </member>
        <member name="M:Hla.Rti1516.IObjectClassHandle.Encode(System.Byte[],System.Int32)">
            <summary> 
            Encodes this object handle, placing the result into the specified
            buffer.
            </summary>
            <param name="buffer">the buffer to contain the encoded value
            </param>
            <param name="offset">the offset within the buffer at which to store
            the encoded value
            </param>
        </member>
        <member name="M:Hla.Rti1516.IObjectClassHandle.ToString">
            <summary> 
            Returns a string representation of this object class handle.
            </summary>
            <returns> a string representation of this object class handle
            </returns>
        </member>
        <member name="T:Hla.Rti1516.InteractionRelevanceAdvisorySwitchIsOff">
            <summary>
             An exception indicating that the interaction relevance advisory switch is off.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.InteractionRelevanceAdvisorySwitchIsOff.#ctor">
            <summary> 
            Initializes a new instance of the InteractionRelevanceAdvisorySwitchIsOff class. 
            </summary>
        </member>
        <member name="M:Hla.Rti1516.InteractionRelevanceAdvisorySwitchIsOff.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the InteractionRelevanceAdvisorySwitchIsOff class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error. 
            </param>
        </member>
        <member name="M:Hla.Rti1516.InteractionRelevanceAdvisorySwitchIsOff.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the InteractionRelevanceAdvisorySwitchIsOff class with a specified error message and
            a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">a detailed description of the exception</param>
            <param name="inner"> The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="M:Hla.Rti1516.InteractionRelevanceAdvisorySwitchIsOff.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the InteractionRelevanceAdvisorySwitchIsOff class with serialized data. 
            </summary>
            <param name="info">The <code>SerializationInfo</code> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <code>StreamingContext</code> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Hla.Rti1516.ILogicalTime">
            <summary> 
            An immutable logical time value.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.ILogicalTime.IsInitial">
            <summary> 
            Checks whether this represents an initial time.
            </summary>
            <returns> <code>true</code> if this represents an initial time,
            <code>false</code> otherwise
            </returns>
        </member>
        <member name="M:Hla.Rti1516.ILogicalTime.IsFinal">
            <summary> 
            Checks whether this represents a final time.
            </summary>
            <returns> <code>true</code> if this represents a final time,
            <code>false</code> otherwise
            </returns>
        </member>
        <member name="M:Hla.Rti1516.ILogicalTime.Add(Hla.Rti1516.ILogicalTimeInterval)">
            <summary> 
            Adds the specified time interval to this logical time, returning
            the result as a new <code>ILogicalTime</code>.
            </summary>
            <param name="val">the time interval to Add to this logical time
            </param>
            <returns> a new <code>ILogicalTime</code> that represents this logical time
            plus the specified time interval
            </returns>
            <exception cref="T:Hla.Rti1516.IllegalTimeArithmetic">  if the operation cannot be performed
            </exception>
        </member>
        <member name="M:Hla.Rti1516.ILogicalTime.Subtract(Hla.Rti1516.ILogicalTimeInterval)">
            <summary> 
            Subtracts the specified time interval from this logical time, returning
            the result as a new <code>ILogicalTime</code>.
            </summary>
            <param name="val">the time interval to Subtract from this logical time
            </param>
            <returns> a new <code>ILogicalTime</code> that represents this logical time
            minus the specified time interval
            </returns>
            <exception cref="T:Hla.Rti1516.IllegalTimeArithmetic">  if the operation cannot be performed
            </exception>
        </member>
        <member name="M:Hla.Rti1516.ILogicalTime.Distance(Hla.Rti1516.ILogicalTime)">
            <summary> 
            Computes and returns the time interval between this logical time
            and another one.
            </summary>
            <param name="val">the other logical time
            </param>
            <returns> the logical time interval between this logical time and
            the other logical time
            </returns>
        </member>
        <member name="M:Hla.Rti1516.ILogicalTime.Equals(System.Object)">
            <summary>
             Checks this logical time for equality with another.
            </summary>
            <param name="other">the other logical time to compare this to
            </param>
            <returns> <code>true</code> if the other object represents the
            same logical time as this one, <code>false</code> otherwise
            </returns>
        </member>
        <member name="M:Hla.Rti1516.ILogicalTime.GetHashCode">
            <summary>
             Computes and returns a hash code corresponding to this logical time.
            </summary>
            <returns> a hash code corresponding to this logical time
            </returns>
        </member>
        <member name="M:Hla.Rti1516.ILogicalTime.ToString">
            <summary>
             Returns a string representation of this logical time.
            </summary>
            <returns> a string representation of this logical time
            </returns>
        </member>
        <member name="M:Hla.Rti1516.ILogicalTime.EncodedLength">
            <summary> 
            Returns the encoded length of this logical time.
            </summary>
            <returns> the encoded length of this logical time (in bytes)
            </returns>
        </member>
        <member name="M:Hla.Rti1516.ILogicalTime.Encode(System.Byte[],System.Int32)">
            <summary> 
            Encodes this logical time, placing the result into the specified
            buffer.
            </summary>
            <param name="buffer">the buffer in which to place the result
            </param>
            <param name="offset">the offset within the buffer at which to store the
            encoded value
            </param>
        </member>
        <member name="T:Hla.Rti1516.IFederateHandleSet">
            <summary> 
            All <code>Set</code> operations are required, none are optional.  Methods
            <code>Add</code> and <code>Remove</code> should throw
            <code>IllegalArgumentException</code> if the argument is not a
            <code>FederateHandleHandle</code>.  Methods <code>addAll</code>,
            <code>RemoveAll</code> and <code>RetainAll</code> should throw
            <code>IllegalArgumentException</code> if the argument is not a
            <code>IFederateHandleSet</code>.
            </summary>
        </member>
        <member name="T:Hla.Rti1516.FederateHasNotBegunSave">
            <summary> 
            An exception indicating that the federate has not begun the save operation.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.FederateHasNotBegunSave.#ctor">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.AttributeAlreadyBeingAcquired">
            <summary> 
            An exception thrown when an attribute is already being acquired.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.AttributeAlreadyBeingAcquired.#ctor">
            <summary> 
            Initializes a new instance of the AttributeAlreadyBeingAcquired class. 
            </summary>
        </member>
        <member name="M:Hla.Rti1516.AttributeAlreadyBeingAcquired.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the AttributeAlreadyBeingAcquired class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error. 
            </param>
        </member>
        <member name="M:Hla.Rti1516.AttributeAlreadyBeingAcquired.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the AttributeAlreadyBeingAcquired class with a specified error message and
            a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">a detailed description of the exception</param>
            <param name="inner"> The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="M:Hla.Rti1516.AttributeAlreadyBeingAcquired.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the AttributeAlreadyBeingAcquired class with serialized data. 
            </summary>
            <param name="info">The <code>SerializationInfo</code> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <code>StreamingContext</code> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Hla.Rti1516.RestoreNotRequested">
            <summary> 
            An exception indicating that a restore operation was not requested.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.RestoreNotRequested.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.ObjectInstanceNotKnown">
            <summary> 
            An exception indicating that an object instance is unknown.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.ObjectInstanceNotKnown.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.ObjectInstanceNameInUse">
            <summary> 
            An exception indicating that an object instance name is in use.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.ObjectInstanceNameInUse.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.InvalidObjectClassHandle">
            <summary> 
            An exception indicating an invalid object class handle.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.InvalidObjectClassHandle.#ctor">
            <summary> 
            Initializes a new instance of the InvalidObjectClassHandle class. 
            </summary>
        </member>
        <member name="M:Hla.Rti1516.InvalidObjectClassHandle.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the InvalidObjectClassHandle class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error. 
            </param>
        </member>
        <member name="M:Hla.Rti1516.InvalidObjectClassHandle.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the InvalidObjectClassHandle class with a specified error message and
            a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">a detailed description of the exception</param>
            <param name="inner"> The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="M:Hla.Rti1516.InvalidObjectClassHandle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the InvalidObjectClassHandle class with serialized data. 
            </summary>
            <param name="info">The <code>SerializationInfo</code> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <code>StreamingContext</code> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Hla.Rti1516.InvalidAttributeHandle">
            <summary> 
            An exception indicating an invalid attribute handle.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.InvalidAttributeHandle.#ctor">
            <summary> 
            Initializes a new instance of the InvalidAttributeHandle class. 
            </summary>
        </member>
        <member name="M:Hla.Rti1516.InvalidAttributeHandle.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the InvalidAttributeHandle class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error. 
            </param>
        </member>
        <member name="M:Hla.Rti1516.InvalidAttributeHandle.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the InvalidAttributeHandle class with a specified error message and
            a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">a detailed description of the exception</param>
            <param name="inner"> The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="M:Hla.Rti1516.InvalidAttributeHandle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the InvalidAttributeHandle class with serialized data. 
            </summary>
            <param name="info">The <code>SerializationInfo</code> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <code>StreamingContext</code> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Hla.Rti1516.IllegalName">
            <summary> 
            An exception indicating an illegal name.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.IllegalName.#ctor">
            <summary> 
            Initializes a new instance of the IllegalName class. 
            </summary>
        </member>
        <member name="M:Hla.Rti1516.IllegalName.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the IllegalName class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error. 
            </param>
        </member>
        <member name="M:Hla.Rti1516.IllegalName.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the IllegalName class with a specified error message and
            a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">a detailed description of the exception</param>
            <param name="inner"> The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="M:Hla.Rti1516.IllegalName.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the IllegalName class with serialized data. 
            </summary>
            <param name="info">The <code>SerializationInfo</code> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <code>StreamingContext</code> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Hla.Rti1516.FederateUnableToUseTime">
            <summary>
             An exception indicating that the federate is unable to use time services.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.FederateUnableToUseTime.#ctor">
            <summary> 
            Initializes a new instance of the FederateUnableToUseTime class. 
            </summary>
        </member>
        <member name="M:Hla.Rti1516.FederateUnableToUseTime.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the FederateUnableToUseTime class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error. 
            </param>
        </member>
        <member name="M:Hla.Rti1516.FederateUnableToUseTime.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the FederateUnableToUseTime class with a specified error message and
            a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">a detailed description of the exception</param>
            <param name="inner"> The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="M:Hla.Rti1516.FederateUnableToUseTime.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the FederateUnableToUseTime class with serialized data. 
            </summary>
            <param name="info">The <code>SerializationInfo</code> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <code>StreamingContext</code> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Hla.Rti1516.FederatesCurrentlyJoined">
            <summary>
             An exception indicating that federates are currently joined.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.FederatesCurrentlyJoined.#ctor">
            <summary> 
            Initializes a new instance of the FederatesCurrentlyJoined class. 
            </summary>
        </member>
        <member name="M:Hla.Rti1516.FederatesCurrentlyJoined.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the FederatesCurrentlyJoined class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error. 
            </param>
        </member>
        <member name="M:Hla.Rti1516.FederatesCurrentlyJoined.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the FederatesCurrentlyJoined class with a specified error message and
            a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">a detailed description of the exception</param>
            <param name="inner"> The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="M:Hla.Rti1516.FederatesCurrentlyJoined.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the FederatesCurrentlyJoined class with serialized data. 
            </summary>
            <param name="info">The <code>SerializationInfo</code> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <code>StreamingContext</code> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Hla.Rti1516.FederateNotExecutionMember">
            <summary>
             An exception indicating that the federate is not a member of the execution.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.FederateNotExecutionMember.#ctor">
            <summary> 
            Initializes a new instance of the FederateNotExecutionMember class. 
            </summary>
        </member>
        <member name="M:Hla.Rti1516.FederateNotExecutionMember.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the FederateNotExecutionMember class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error. 
            </param>
        </member>
        <member name="M:Hla.Rti1516.FederateNotExecutionMember.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the FederateNotExecutionMember class with a specified error message and
            a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">a detailed description of the exception</param>
            <param name="inner"> The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="M:Hla.Rti1516.FederateNotExecutionMember.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the FederateNotExecutionMember class with serialized data. 
            </summary>
            <param name="info">The <code>SerializationInfo</code> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <code>StreamingContext</code> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Hla.Rti1516.AttributeDivestitureWasNotRequested">
            <summary> 
            An exception thrown when attribute divestiture was not requested.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.AttributeDivestitureWasNotRequested.#ctor">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.TimeQueryReturn">
            <summary>
             The value returned by a time query.
            </summary>
        </member>
        <member name="F:Hla.Rti1516.TimeQueryReturn.timeIsValid">
            <summary> Whether or not the returned time is valid.</summary>
        </member>
        <member name="F:Hla.Rti1516.TimeQueryReturn.time">
            <summary> The returned time.</summary>
        </member>
        <member name="M:Hla.Rti1516.TimeQueryReturn.#ctor(System.Boolean,Hla.Rti1516.ILogicalTime)">
            <summary> 
            Constructor.
            </summary>
            <param name="pTimeIsValid">whether or not the returned time is valid
            </param>
            <param name="pTime">the returned time
            </param>
        </member>
        <member name="T:Hla.Rti1516.RestoreStatus">
            <summary> 
            Represents a restoration status.
            </summary>
        </member>
        <member name="F:Hla.Rti1516.RestoreStatus.NO_RESTORE_IN_PROGRESS">
            <summary> No restoration operation is in progress.</summary>
        </member>
        <member name="F:Hla.Rti1516.RestoreStatus.FEDERATE_RESTORE_REQUEST_PENDING">
            <summary> The federate's request for a restoration operation is pending.</summary>
        </member>
        <member name="F:Hla.Rti1516.RestoreStatus.FEDERATE_WAITING_FOR_RESTORE_TO_BEGIN">
            <summary> The federate is waiting for a restoration operation to begin.</summary>
        </member>
        <member name="F:Hla.Rti1516.RestoreStatus.FEDERATE_PREPARED_TO_RESTORE">
            <summary> The federate is prepared to perform a restoration operation.</summary>
        </member>
        <member name="F:Hla.Rti1516.RestoreStatus.FEDERATE_RESTORING">
            <summary> The federate is currently performing a restoration operation.</summary>
        </member>
        <member name="F:Hla.Rti1516.RestoreStatus.FEDERATE_WAITING_FOR_FEDERATION_TO_RESTORE">
            <summary> The federate is waiting for the federation to be restored.</summary>
        </member>
        <member name="F:Hla.Rti1516.RestoreStatus.val">
            <summary> The value of the instance.</summary>
        </member>
        <member name="M:Hla.Rti1516.RestoreStatus.#ctor(Hla.Rti1516.RestoreStatus)">
            <summary> 
            Copy constructor.
            </summary>
            <param name="otherRestoreStatus">the restoration status object to copy
            </param>
        </member>
        <member name="M:Hla.Rti1516.RestoreStatus.#ctor(System.Int32)">
            <summary> 
            Private constructor.
            </summary>
            <param name="pValue">the integer value corresponding to this restoration status
            </param>
        </member>
        <member name="M:Hla.Rti1516.RestoreStatus.Equals(System.Object)">
            <summary> 
            Compares this restoration status for equality with another.
            </summary>
            <param name="otherRestoreStatus">the other restoration status
            </param>
            <returns> <code>true</code> if the two restoration status objects are equal,
            <code>false</code> otherwise
            </returns>
        </member>
        <member name="M:Hla.Rti1516.RestoreStatus.GetHashCode">
            <summary> 
            Computes and returns a hash code corresponding to this restoration status.
            </summary>
            <returns> a hash code corresponding to this restoration status
            </returns>
        </member>
        <member name="M:Hla.Rti1516.RestoreStatus.ToString">
            <summary> 
            Returns a string representation of this restoration status.
            </summary>
            <returns> a string representation of this restoration status
            </returns>
        </member>
        <member name="T:Hla.Rti1516.ILogicalTimeInterval">
            <summary> 
            An immutable logical time interval.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.ILogicalTimeInterval.IsZero">
            <summary> 
            Checks whether this logical time interval has a zero length.
            </summary>
            <returns> <code>true</code> if this logical time interval has a
            zero length, <code>false</code> otherwise
            </returns>
        </member>
        <member name="M:Hla.Rti1516.ILogicalTimeInterval.IsEpsilon">
            <summary> 
            Checks whether this logical time interval has an epsilon length.
            </summary>
            <returns> <code>true</code> if this logical time interval has an
            epsilon length, <code>false</code> otherwise
            </returns>
        </member>
        <member name="M:Hla.Rti1516.ILogicalTimeInterval.Subtract(Hla.Rti1516.ILogicalTimeInterval)">
            <summary> 
            Subtracts the specified logical time interval from this one,
            returning a new <code>ILogicalTimeInterval</code> representing the
            result.
            </summary>
            <param name="subtrahend">the logical time interval to Subtract from this one
            </param>
            <returns> a new <code>ILogicalTimeInterval</code> representing the
            result of the operation
            </returns>
        </member>
        <member name="M:Hla.Rti1516.ILogicalTimeInterval.Equals(System.Object)">
            <summary>
             Checks this logical time interval for equality with another.
            </summary>
            <param name="other">the <code>ILogicalTimeInterval</code> to compare this to
            </param>
            <returns> <code>true</code> if the two intervals are equal, <code>false</code>
            otherwise
            </returns>
        </member>
        <member name="M:Hla.Rti1516.ILogicalTimeInterval.GetHashCode">
            <summary> 
            Computes and returns a hash code corresponding to this logical time interval.
            </summary>
            <returns> a hash code corresponding to this logical time interval
            </returns>
        </member>
        <member name="M:Hla.Rti1516.ILogicalTimeInterval.ToString">
            <summary> 
            Returns a string representation of this logical time interval.
            </summary>
            <returns> a string representation of this logical time interval
            </returns>
        </member>
        <member name="M:Hla.Rti1516.ILogicalTimeInterval.EncodedLength">
            <summary> 
            Returns the encoded length of this logical time interval.
            </summary>
            <returns> the encoded length of this logical time interval (in bytes)
            </returns>
        </member>
        <member name="M:Hla.Rti1516.ILogicalTimeInterval.Encode(System.Byte[],System.Int32)">
            <summary> 
            Encodes this logical time interval, placing the result into the
            specified buffer.
            </summary>
            <param name="buffer">the buffer in which to place the encoded interval
            </param>
            <param name="offset">the offset within the buffer at which to store
            the encoded interval
            </param>
        </member>
        <member name="T:Hla.Rti1516.IInteractionClassHandleFactory">
            <summary> 
            This factory is used only (outside of the RTI) to Create 
            <code>IInteractionClassHandle</code>s corresponding to interaction
            class handles received as attribute or parameter values.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.IInteractionClassHandleFactory.Decode(System.Byte[],System.Int32)">
            <summary>
             Decodes an interaction class handle contained within the specified
            buffer, returning a corresponding instance of 
            <code>IInteractionClassHandle</code>.
            </summary>
            <param name="buffer">the buffer that contains the encoded handle
            </param>
            <param name="offset">the offset within the buffer at which the handle is stored
            </param>
            <returns> an instance of <code>IInteractionClassHandle</code> corresponding
            to the encoded handle
            </returns>
            <exception cref="T:Hla.Rti1516.CouldNotDecode"> if the interaction class handle could not be decoded
            </exception>
            <exception cref="T:Hla.Rti1516.FederateNotExecutionMember"> if the federate is not a member of the
            execution
            </exception>
        </member>
        <member name="T:Hla.Rti1516.IFederateHandle">
            <summary> 
            Type-safe handle for a federate.  Generally these are created by the
            RTI and passed to the user.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.IFederateHandle.Equals(System.Object)">
            <summary> 
            Tests this federate handle for equality with another.
            </summary>
            <param name="otherFederateHandle">the other federate handle to compare this to
            </param>
            <returns> <code>true</code> if this refers to the same federate as other
            handle, <code>false</code> otherwise
            </returns>
        </member>
        <member name="M:Hla.Rti1516.IFederateHandle.GetHashCode">
            <summary> 
            Computes and returns the hash code corresponding to this federate handle.
            </summary>
            <returns> the hash code corresponding to this federate handle
            </returns>
        </member>
        <member name="M:Hla.Rti1516.IFederateHandle.EncodedLength">
            <summary> 
            Returns the encoded length of this federate handle.
            </summary>
            <returns> the encoded length of this federate handle (in bytes)
            </returns>
        </member>
        <member name="M:Hla.Rti1516.IFederateHandle.Encode(System.Byte[],System.Int32)">
            <summary> 
            Encodes this federate handle, placing the result into the specified
            byte array.
            </summary>
            <param name="buffer">the buffer to hold the encoded federate handle
            </param>
            <param name="offset">the offset within the buffer at which to store the
            encoded handle
            </param>
        </member>
        <member name="M:Hla.Rti1516.IFederateHandle.ToString">
            <summary> 
            Returns a string representation of this federate handle.
            </summary>
            <returns> a string representation of this federate handle
            </returns>
        </member>
        <member name="T:Hla.Rti1516.FederateAlreadyExecutionMember">
            <summary> 
            An exception indicating that the federate is already a member of the execution.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.FederateAlreadyExecutionMember.#ctor">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.ErrorReadingFDD">
            <summary> 
            An exception indicating an error reading the federation
            description document.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.ErrorReadingFDD.#ctor">
            <summary> 
            Initializes a new instance of the ErrorReadingFDD class. 
            </summary>
        </member>
        <member name="M:Hla.Rti1516.ErrorReadingFDD.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the ErrorReadingFDD class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error. 
            </param>
        </member>
        <member name="M:Hla.Rti1516.ErrorReadingFDD.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the ErrorReadingFDD class with a specified error message and
            a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">a detailed description of the exception</param>
            <param name="inner"> The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="M:Hla.Rti1516.ErrorReadingFDD.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the ErrorReadingFDD class with serialized data. 
            </summary>
            <param name="info">The <code>SerializationInfo</code> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <code>StreamingContext</code> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Hla.Rti1516.SpecifiedSaveLabelDoesNotExist">
            <summary> 
            An exception indicating that the specified save label does not exist.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.SpecifiedSaveLabelDoesNotExist.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.SaveStatus">
            <summary> 
            Represents the status of a save operation.
            </summary>
        </member>
        <member name="F:Hla.Rti1516.SaveStatus.NO_SAVE_IN_PROGRESS">
            <summary> No save operation is in progress.</summary>
        </member>
        <member name="F:Hla.Rti1516.SaveStatus.FEDERATE_INSTRUCTED_TO_SAVE">
            <summary> The federate has been instructed to save.</summary>
        </member>
        <member name="F:Hla.Rti1516.SaveStatus.FEDERATE_SAVING">
            <summary> The federate is saving.</summary>
        </member>
        <member name="F:Hla.Rti1516.SaveStatus.FEDERATE_WAITING_FOR_FEDERATION_TO_SAVE">
            <summary> The federate is waiting for the federation to save.</summary>
        </member>
        <member name="F:Hla.Rti1516.SaveStatus.val">
            <summary> The value of the instance.</summary>
        </member>
        <member name="M:Hla.Rti1516.SaveStatus.#ctor(Hla.Rti1516.SaveStatus)">
            <summary> 
            Copy constructor.
            </summary>
            <param name="otherSaveStatus">the save status object to copy
            </param>
        </member>
        <member name="M:Hla.Rti1516.SaveStatus.#ctor(System.Int32)">
            <summary> 
            Private constructor.
            </summary>
            <param name="pValue">the integer value corresponding to this save status
            </param>
        </member>
        <member name="M:Hla.Rti1516.SaveStatus.Equals(System.Object)">
            <summary> 
            Compares this save status for equality with another.
            </summary>
            <param name="otherSaveStatus">the other save status
            </param>
            <returns> <code>true</code> if the two save status objects are equal,
            <code>false</code> otherwise
            </returns>
        </member>
        <member name="M:Hla.Rti1516.SaveStatus.GetHashCode">
            <summary> 
            Computes and returns a hash code corresponding to this save status.
            </summary>
            <returns> a hash code corresponding to this save status
            </returns>
        </member>
        <member name="M:Hla.Rti1516.SaveStatus.ToString">
            <summary> 
            Returns a string representation of this save status.
            </summary>
            <returns> a string representation of this save status
            </returns>
        </member>
        <member name="T:Hla.Rti1516.RangeBounds">
            <summary> 
            Represents a numerical range.
            </summary>
        </member>
        <member name="F:Hla.Rti1516.RangeBounds.Lower">
            <summary> The lower bound of the range.</summary>
        </member>
        <member name="F:Hla.Rti1516.RangeBounds.Upper">
            <summary> The upper bound of the range.</summary>
        </member>
        <member name="M:Hla.Rti1516.RangeBounds.#ctor(System.Int64,System.Int64)">
            <summary> 
            Constructor.
            </summary>
            <param name="pLower">the lower bound of the range
            </param>
            <param name="pUpper">the upper bound of the range
            </param>
        </member>
        <member name="T:Hla.Rti1516.InvalidLogicalTime">
            <summary> 
            An exception indicating an invalid logical time.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.InvalidLogicalTime.#ctor">
            <summary> 
            Initializes a new instance of the InvalidLogicalTime class. 
            </summary>
        </member>
        <member name="M:Hla.Rti1516.InvalidLogicalTime.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the InvalidLogicalTime class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error. 
            </param>
        </member>
        <member name="M:Hla.Rti1516.InvalidLogicalTime.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the InvalidLogicalTime class with a specified error message and
            a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">a detailed description of the exception</param>
            <param name="inner"> The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="M:Hla.Rti1516.InvalidLogicalTime.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the InvalidLogicalTime class with serialized data. 
            </summary>
            <param name="info">The <code>SerializationInfo</code> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <code>StreamingContext</code> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Hla.Rti1516.InteractionParameterNotDefined">
            <summary> 
            An exception indicating that an interaction parameter was not defined.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.InteractionParameterNotDefined.#ctor">
            <summary> 
            Initializes a new instance of the InteractionParameterNotDefined class. 
            </summary>
        </member>
        <member name="M:Hla.Rti1516.InteractionParameterNotDefined.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the InteractionParameterNotDefined class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error. 
            </param>
        </member>
        <member name="M:Hla.Rti1516.InteractionParameterNotDefined.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the InteractionParameterNotDefined class with a specified error message and
            a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">a detailed description of the exception</param>
            <param name="inner"> The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="M:Hla.Rti1516.InteractionParameterNotDefined.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the InteractionParameterNotDefined class with serialized data. 
            </summary>
            <param name="info">The <code>SerializationInfo</code> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <code>StreamingContext</code> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Hla.Rti1516.IMessageRetractionHandle">
            <summary> 
            A handle associated with messages that may be used to request and
            perform retractions.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.IMessageRetractionHandle.Equals(System.Object)">
            <summary> 
            Checks this message retraction handle for equality with another.
            </summary>
            <param name="otherMessageRetractionHandle">the other message retraction handle
            to compare this to
            </param>
            <returns> <code>true</code> if the message retraction handles are equal,
            <code>false</code> otherwise
            </returns>
        </member>
        <member name="M:Hla.Rti1516.IMessageRetractionHandle.GetHashCode">
            <summary> 
            Computes and returns a hash code corresponding to this message
            retraction handle
            </summary>
            <returns> a hash code corresponding to this message retraction
            handle
            </returns>
        </member>
        <member name="M:Hla.Rti1516.IMessageRetractionHandle.ToString">
            <summary> 
            Returns a string representation of this message retraction handle.
            </summary>
            <returns> a string representation of this message retraction handle
            </returns>
        </member>
        <member name="T:Hla.Rti1516.IDimensionHandle">
            <summary>
             Type-safe handle for a dimension.  Generally these are created by the
            RTI and passed to the user.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.IDimensionHandle.Equals(System.Object)">
            <summary>
             Checks this dimension handle for equality with another.
            </summary>
            <param name="otherDimensionHandle">the dimension handle to compare this to
            </param>
            <returns> <code>true</code> if this refers to the same dimension as the
            other handle, <code>false</code> otherwise
            </returns>
        </member>
        <member name="M:Hla.Rti1516.IDimensionHandle.GetHashCode">
            <summary> Computes and returns a hash code corresponding to this dimension handle.
            
            </summary>
            <returns> the hash code corresponding to this dimension handle
            </returns>
        </member>
        <member name="M:Hla.Rti1516.IDimensionHandle.EncodedLength">
            <summary> 
            Returns the encoded length of this dimension handle.
            </summary>
            <returns> the encoded length of this dimension handle (in bytes)
            </returns>
        </member>
        <member name="M:Hla.Rti1516.IDimensionHandle.Encode(System.Byte[],System.Int32)">
            <summary> 
            Encodes this dimension handle, placing the result into the
            specified buffer.
            </summary>
            <param name="buffer">the buffer to contain the encoded dimension handle
            </param>
            <param name="offset">the offset within the buffer at which to place the
            encoded dimension handle
            </param>
        </member>
        <member name="M:Hla.Rti1516.IDimensionHandle.ToString">
            <summary> 
            Returns a string representation of this dimension handle.
            </summary>
            <returns> a string representation of this dimension handle
            </returns>
        </member>
        <member name="T:Hla.Rti1516.RTIinternalError">
            <summary>
             An exception indicating an internal error in the run-time infrastructure.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.RTIinternalError.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.InteractionRelevanceAdvisorySwitchIsOn">
            <summary> 
            An exception indicating that the interaction relevance advisory switch is on.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.InteractionRelevanceAdvisorySwitchIsOn.#ctor">
            <summary> 
            Initializes a new instance of the InteractionRelevanceAdvisorySwitchIsOn class. 
            </summary>
        </member>
        <member name="M:Hla.Rti1516.InteractionRelevanceAdvisorySwitchIsOn.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the InteractionRelevanceAdvisorySwitchIsOn class with 
            a specified error message. 
            </summary>
            <param name="message">The message that describes the error. 
            </param>
        </member>
        <member name="M:Hla.Rti1516.InteractionRelevanceAdvisorySwitchIsOn.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the InteractionRelevanceAdvisorySwitchIsOn class with a 
            specified error message and
            a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">a detailed description of the exception</param>
            <param name="inner"> The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="M:Hla.Rti1516.InteractionRelevanceAdvisorySwitchIsOn.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the InteractionRelevanceAdvisorySwitchIsOn class with 
            serialized data. 
            </summary>
            <param name="info">The <code>SerializationInfo</code> that holds the serialized object
            data about the exception being thrown.
            </param>
            <param name="context">The <code>StreamingContext</code> that contains contextual information 
            about the source or destination.
            </param>
        </member>
        <member name="T:Hla.Rti1516.InteractionParameterNotRecognized">
            <summary>
             An exception indicating that an interaction parameter was not recognized.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.InteractionParameterNotRecognized.#ctor">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.InteractionClassNotDefined">
            <summary> 
            An exception indicating that an interaction class was not defined.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.InteractionClassNotDefined.#ctor">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.AttributeHandleSetFactory">
            <summary> 
            A factory for <code>IAttributeHandleSet</code>s.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.AttributeHandleSetFactory.Create">
            <summary> 
            Creates and returns a new <code>IAttributeHandleSet</code>.
            </summary>
            <returns> the newly created <code>IAttributeHandleSet</code>
            </returns>
        </member>
        <member name="T:Hla.Rti1516.AttributeRelevanceAdvisorySwitchIsOff">
            <summary> 
            An exception thrown when the attribute relevance advisory switch is off.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.AttributeRelevanceAdvisorySwitchIsOff.#ctor">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.TimeConstrainedIsNotEnabled">
            <summary>
             An exception indicating that time-constrained mode is not enabled.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.TimeConstrainedIsNotEnabled.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.RestoreFailureReason">
            <summary> 
            Represents a reason for failure to restore.
            </summary>
        </member>
        <member name="F:Hla.Rti1516.RestoreFailureReason.RTI_UNABLE_TO_RESTORE">
            <summary> The run-time infrastructure was unable to restore the federate.</summary>
        </member>
        <member name="F:Hla.Rti1516.RestoreFailureReason.FEDERATE_REPORTED_FAILURE">
            <summary> The federate reported a failure.</summary>
        </member>
        <member name="F:Hla.Rti1516.RestoreFailureReason.FEDERATE_RESIGNED">
            <summary> The federate had resigned from the federation.</summary>
        </member>
        <member name="F:Hla.Rti1516.RestoreFailureReason.RTI_DETECTED_FAILURE">
            <summary> The run-time infrastructure detected a failure.</summary>
        </member>
        <member name="F:Hla.Rti1516.RestoreFailureReason.val">
            <summary> The value of the instance.</summary>
        </member>
        <member name="M:Hla.Rti1516.RestoreFailureReason.#ctor(Hla.Rti1516.RestoreFailureReason)">
            <summary> 
            Copy constructor.
            </summary>
            <param name="otherRestoreFailureReason">the restoration failure reason object to copy
            </param>
        </member>
        <member name="M:Hla.Rti1516.RestoreFailureReason.#ctor(System.Int32)">
            <summary>
            Private constructor.
            </summary>
            <param name="pValue">the integer value corresponding to this restoration failure reason
            </param>
        </member>
        <member name="M:Hla.Rti1516.RestoreFailureReason.Equals(System.Object)">
            <summary> 
            Compares this restoration failure reason for equality with another.
            </summary>
            <param name="otherRestoreFailureReason">the other restoration failure reason
            </param>
            <returns> <code>true</code> if the two restoration failure reasons are equal,
            <code>false</code> otherwise
            </returns>
        </member>
        <member name="M:Hla.Rti1516.RestoreFailureReason.GetHashCode">
            <summary> 
            Computes and returns a hash code corresponding to this restoration failure reason.
            </summary>
            <returns> a hash code corresponding to this restoration failure reason
            </returns>
        </member>
        <member name="M:Hla.Rti1516.RestoreFailureReason.ToString">
            <summary> 
            Returns a string representation of this restoration failure reason.
            </summary>
            <returns> a string representation of this restoration failure reason
            </returns>
        </member>
        <member name="T:Hla.Rti1516.ResignAction">
            <summary> 
            Represents a type of resignation action.
            </summary>
        </member>
        <member name="F:Hla.Rti1516.ResignAction.UNCONDITIONALLY_DIVEST_ATTRIBUTES">
            <summary> Upon resignation, divest attributes unconditionally.</summary>
        </member>
        <member name="F:Hla.Rti1516.ResignAction.DELETE_OBJECTS">
            <summary> Upon resignation, Delete objects.</summary>
        </member>
        <member name="F:Hla.Rti1516.ResignAction.CANCEL_PENDING_OWNERSHIP_ACQUISITIONS">
            <summary>  Upon resignation, cancel pending ownership acquisitions.</summary>
        </member>
        <member name="F:Hla.Rti1516.ResignAction.DELETE_OBJECTS_THEN_DIVEST">
            <summary> Upon resignation, Delete objects and then divest attributes.</summary>
        </member>
        <member name="F:Hla.Rti1516.ResignAction.CANCEL_THEN_DELETE_THEN_DIVEST">
            <summary> Upon resignation, cancel pending ownership acquisitions, Delete objects, and
            divest attributes.
            </summary>
        </member>
        <member name="F:Hla.Rti1516.ResignAction.NO_ACTION">
            <summary> Take no action upon resignation.</summary>
        </member>
        <member name="F:Hla.Rti1516.ResignAction.val">
            <summary> The value of the instance.</summary>
        </member>
        <member name="M:Hla.Rti1516.ResignAction.#ctor(Hla.Rti1516.ResignAction)">
            <summary> 
            Copy constructor.
            </summary>
            <param name="otherResignAction">the resignation action object to copy
            </param>
        </member>
        <member name="M:Hla.Rti1516.ResignAction.#ctor(System.Int32)">
            <summary> 
            Private constructor.
            </summary>
            <param name="pValue">the integer value corresponding to this resignation action
            </param>
        </member>
        <member name="M:Hla.Rti1516.ResignAction.Equals(System.Object)">
            <summary> 
            Compares this resignation action for equality with another.
            </summary>
            <param name="otherResignAction">the other resignation action
            </param>
            <returns> <code>true</code> if the two resignation actions are equal,
            <code>false</code> otherwise
            </returns>
        </member>
        <member name="M:Hla.Rti1516.ResignAction.GetHashCode">
            <summary> 
            Computes and returns a hash code corresponding to this resignation action.
            </summary>
            <returns> a hash code corresponding to this resignation action
            </returns>
        </member>
        <member name="M:Hla.Rti1516.ResignAction.ToString">
            <summary> 
            Returns a string representation of this resignation action.
            </summary>
            <returns> a string representation of this resignation action
            </returns>
        </member>
        <member name="T:Hla.Rti1516.ObjectClassNotRecognized">
            <summary> 
            An exception indicating that an object class is not recognized.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.ObjectClassNotRecognized.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.IFederateHandleSetFactory">
            <summary> 
            A factory for <code>IFederateHandleSet</code> instances.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.IFederateHandleSetFactory.Create">
            <summary>
             Creates and returns a new <code>IFederateHandleSet</code>.
            </summary>
            <returns> the newly created <code>IFederateHandleSet</code>
            </returns>
        </member>
        <member name="T:Hla.Rti1516.IFederateAmbassador">
            <summary> 
            The interface used by the run time infrastructure to interact with
            the federate.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.SynchronizationPointRegistrationSucceeded(System.String)">
            <summary> 
            Notifies the federate that the synchronization point registration operation has
            succeeded.
            </summary>
            <param name="synchronizationPointLabel">the label of the registered synchronization point
            </param>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.SynchronizationPointRegistrationFailed(System.String,Hla.Rti1516.SynchronizationPointFailureReason)">
            <summary> 
            Notifies the federate that the synchronization point registration operation has
            failed.
            </summary>
            <param name="synchronizationPointLabel">the label of the synchronization point
            </param>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.AnnounceSynchronizationPoint(System.String,System.Byte[])">
            <summary> 
            Notifies the federate that a synchronization point has been announced.
            </summary>
            <param name="synchronizationPointLabel">the label of the announced synchronization point
            </param>
            <param name="userSuppliedTag">a user-supplied tag associated with the announcement
            </param>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.FederationSynchronized(System.String)">
            <summary> 
            Notifies the federate that the federation has been synchronized.
            </summary>
            <param name="synchronizationPointLabel">the label of the synchronization point
            </param>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.InitiateFederateSave(System.String)">
            <summary> 
            Notifies the federate that it should initiate a save operation.
            </summary>
            <param name="label">the label to save under
            </param>
            <exception cref="T:Hla.Rti1516.UnableToPerformSave">  if the federate cannot perform the operation
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.InitiateFederateSave(System.String,Hla.Rti1516.ILogicalTime)">
            <summary> 
            Notifies the federate that it should initiate a save operation.
            </summary>
            <param name="label">the label to save under
            </param>
            <param name="time">the time of the save operation
            </param>
            <exception cref="T:Hla.Rti1516.InvalidLogicalTime">  if the specified time is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.UnableToPerformSave">  if the federate cannot perform the operation
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.FederationSaved">
            <summary> 
            Notifies the federate that the federation has been saved.
            </summary>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.FederationNotSaved(Hla.Rti1516.SaveFailureReason)">
            <summary> 
            Notifies the federate that the federation has not been saved.
            </summary>
            <param name="reason">the reason for the failure of the save operation
            </param>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.FederationSaveStatusResponse(Hla.Rti1516.FederateHandleSaveStatusPair[])">
            <summary> 
            Provides information to the federate concerning the save status of other
            members of the federation.
            </summary>
            <param name="response">the responses associated with each federate
            </param>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.RequestFederationRestoreSucceeded(System.String)">
            <summary> 
            Notifies the federate that its request to restore the saved state of the
            federation has succeeded.
            </summary>
            <param name="label">the label of the stored state to restore
            </param>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.RequestFederationRestoreFailed(System.String)">
            <summary> 
            Notifies the federate that its request to restore the saved state of the
            federation has failed.
            </summary>
            <param name="label">the label of the stored state to restore
            </param>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.FederationRestoreBegun">
            <summary> 
            Notifies the federate that the federation restore operation has begun.
            </summary>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.InitiateFederateRestore(System.String,Hla.Rti1516.IFederateHandle)">
            <summary> 
            Notifies the federate that it should initiate a restore operation.
            </summary>
            <param name="label">the label of the stored state to restore
            </param>
            <param name="federateHandle">the federate handle
            </param>
            <exception cref="T:Hla.Rti1516.SpecifiedSaveLabelDoesNotExist">  if the specified save label does not exist
            </exception>
            <exception cref="T:Hla.Rti1516.CouldNotInitiateRestore">  if the restore operation cannot be performed
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.FederationRestored">
            <summary> 
            Notifies the federate that the federation has been restored.
            </summary>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.FederationNotRestored(Hla.Rti1516.RestoreFailureReason)">
            <summary> 
            Notifies the federate that the federation has not been restored.
            </summary>
            <param name="reason">the reason for the failure of the restore operation
            </param>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.FederationRestoreStatusResponse(Hla.Rti1516.FederateHandleRestoreStatusPair[])">
            <summary> 
            Provides information to the federate concerning the restore status of other
            members of the federation.
            </summary>
            <param name="response">the responses associated with each federate
            </param>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.StartRegistrationForObjectClass(Hla.Rti1516.IObjectClassHandle)">
            <summary> 
            Notifies the federate that it should begin registering objects of a certain class.
            </summary>
            <param name="theClass">the handle of the class of objects to begin registering
            </param>
            <exception cref="T:Hla.Rti1516.ObjectClassNotPublished">  if the specified object class is not published
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.StopRegistrationForObjectClass(Hla.Rti1516.IObjectClassHandle)">
            <summary> 
            Notifies the federate that it should Stop registering objects of a certain class.
            </summary>
            <param name="theClass">the handle of the class of objects to Stop registering
            </param>
            <exception cref="T:Hla.Rti1516.ObjectClassNotPublished">  if the specified object class is not published
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.TurnInteractionsOn(Hla.Rti1516.IInteractionClassHandle)">
            <summary> 
            Notifies the federate that it should turn interactions of a certain class on.
            </summary>
            <param name="theHandle">the handle of the class of interactions to turn on
            </param>
            <exception cref="T:Hla.Rti1516.InteractionClassNotPublished">  if the specified interaction class is not published
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.TurnInteractionsOff(Hla.Rti1516.IInteractionClassHandle)">
            <summary> 
            Notifies the federate that it should turn interactions of a certain class off.
            </summary>
            <param name="theHandle">the handle of the class of interactions to turn off
            </param>
            <exception cref="T:Hla.Rti1516.InteractionClassNotPublished">  if the specified interaction class is not published
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.ObjectInstanceNameReservationSucceeded(System.String)">
            <summary> 
            Notifies the federate that its request to reserve an object instance name has
            succeeded.
            </summary>
            <param name="objectName">the reserved object instance name
            </param>
            <exception cref="T:Hla.Rti1516.UnknownName">  if the name is unknown
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.ObjectInstanceNameReservationFailed(System.String)">
            <summary> 
            Notifies the federate that its request to reserve an object instance name has
            failed.
            </summary>
            <param name="objectName">the object instance name
            </param>
            <exception cref="T:Hla.Rti1516.UnknownName">  if the name is unknown
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.DiscoverObjectInstance(Hla.Rti1516.IObjectInstanceHandle,Hla.Rti1516.IObjectClassHandle,System.String)">
            <summary> 
            Notifies the federate of the presence of an object instance.
            </summary>
            <param name="theObject">the instance handle of the newly discovered object
            </param>
            <param name="theObjectClass">the class handle of the newly discovered object
            </param>
            <param name="objectName">the name of the newly discovered object
            </param>
            <exception cref="T:Hla.Rti1516.CouldNotDiscover">  if the object could not be discovered
            </exception>
            <exception cref="T:Hla.Rti1516.ObjectClassNotRecognized">  if the object class was not recognized
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.ReflectAttributeValues(Hla.Rti1516.IObjectInstanceHandle,Hla.Rti1516.IAttributeHandleValueMap,System.Byte[],Hla.Rti1516.OrderType,Hla.Rti1516.TransportationType)">
            <summary> 
            Notifies the federate of changes to the state of an object instance.
            </summary>
            <param name="theObject">the instance handle of the modified object
            </param>
            <param name="theAttributes">the map between attribute handles and the new values of
            the identified attributes
            </param>
            <param name="userSuppliedTag">a user-supplied tag associated with the state change
            </param>
            <param name="sentOrdering">the type of ordering with which the update was sent
            </param>
            <param name="theTransport">the type of transport associated with the update
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance is not known
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotRecognized">  if the attribute was not recognized
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotSubscribed">  if the federate had not subscribed to the
            attribute
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.ReflectAttributeValues(Hla.Rti1516.IObjectInstanceHandle,Hla.Rti1516.IAttributeHandleValueMap,System.Byte[],Hla.Rti1516.OrderType,Hla.Rti1516.TransportationType,Hla.Rti1516.IRegionHandleSet)">
            <summary> 
            Notifies the federate of changes to the state of an object instance.
            </summary>
            <param name="theObject">the instance handle of the modified object
            </param>
            <param name="theAttributes">the map between attribute handles and the new values of
            the identified attributes
            </param>
            <param name="userSuppliedTag">a user-supplied tag associated with the state change
            </param>
            <param name="sentOrdering">the type of ordering with which the update was sent
            </param>
            <param name="theTransport">the type of transport associated with the update
            </param>
            <param name="sentRegions">the set of region handles identifying the regions associated
            with the attribute update
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance is not known
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotRecognized">  if the attribute was not recognized
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotSubscribed">  if the federate had not subscribed to the
            attribute
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.ReflectAttributeValues(Hla.Rti1516.IObjectInstanceHandle,Hla.Rti1516.IAttributeHandleValueMap,System.Byte[],Hla.Rti1516.OrderType,Hla.Rti1516.TransportationType,Hla.Rti1516.ILogicalTime,Hla.Rti1516.OrderType)">
            <summary> 
            Notifies the federate of changes to the state of an object instance.
            </summary>
            <param name="theObject">the instance handle of the modified object
            </param>
            <param name="theAttributes">the map between attribute handles and the new values of
            the identified attributes
            </param>
            <param name="userSuppliedTag">a user-supplied tag associated with the state change
            </param>
            <param name="sentOrdering">the type of ordering with which the update was sent
            </param>
            <param name="theTransport">the type of transport associated with the update
            </param>
            <param name="theTime">the logical time associated with the attribute update
            </param>
            <param name="receivedOrdering">the type of ordering with which the update was received
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance is not known
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotRecognized">  if the attribute was not recognized
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotSubscribed">  if the federate had not subscribed to the
            attribute
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.ReflectAttributeValues(Hla.Rti1516.IObjectInstanceHandle,Hla.Rti1516.IAttributeHandleValueMap,System.Byte[],Hla.Rti1516.OrderType,Hla.Rti1516.TransportationType,Hla.Rti1516.ILogicalTime,Hla.Rti1516.OrderType,Hla.Rti1516.IRegionHandleSet)">
            <summary> 
            Notifies the federate of changes to the state of an object instance.
            </summary>
            <param name="theObject">the instance handle of the modified object
            </param>
            <param name="theAttributes">the map between attribute handles and the new values of
            the identified attributes
            </param>
            <param name="userSuppliedTag">a user-supplied tag associated with the state change
            </param>
            <param name="sentOrdering">the type of ordering with which the update was sent
            </param>
            <param name="theTransport">the type of transport associated with the update
            </param>
            <param name="theTime">the logical time associated with the attribute update
            </param>
            <param name="receivedOrdering">the type of ordering with which the update was received
            </param>
            <param name="sentRegions">the set of region handles identifying the regions associated
            with the attribute update
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance is not known
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotRecognized">  if the attribute was not recognized
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotSubscribed">  if the federate had not subscribed to the
            attribute
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.ReflectAttributeValues(Hla.Rti1516.IObjectInstanceHandle,Hla.Rti1516.IAttributeHandleValueMap,System.Byte[],Hla.Rti1516.OrderType,Hla.Rti1516.TransportationType,Hla.Rti1516.ILogicalTime,Hla.Rti1516.OrderType,Hla.Rti1516.IMessageRetractionHandle)">
            <summary>
             Notifies the federate of changes to the state of an object instance.
            </summary>
            <param name="theObject">the instance handle of the modified object
            </param>
            <param name="theAttributes">the map between attribute handles and the new values of
            the identified attributes
            </param>
            <param name="userSuppliedTag">a user-supplied tag associated with the state change
            </param>
            <param name="sentOrdering">the type of ordering with which the update was sent
            </param>
            <param name="theTransport">the type of transport associated with the update
            </param>
            <param name="theTime">the logical time associated with the attribute update
            </param>
            <param name="receivedOrdering">the type of ordering with which the update was received
            </param>
            <param name="retractionHandle">the message retraction handle
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance is not known
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotRecognized">  if the attribute was not recognized
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotSubscribed">  if the federate had not subscribed to the
            attribute
            </exception>
            <exception cref="T:Hla.Rti1516.InvalidLogicalTime">  if the specified logical time was invalid
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.ReflectAttributeValues(Hla.Rti1516.IObjectInstanceHandle,Hla.Rti1516.IAttributeHandleValueMap,System.Byte[],Hla.Rti1516.OrderType,Hla.Rti1516.TransportationType,Hla.Rti1516.ILogicalTime,Hla.Rti1516.OrderType,Hla.Rti1516.IMessageRetractionHandle,Hla.Rti1516.IRegionHandleSet)">
            <summary> 
            Notifies the federate of changes to the state of an object instance.
            </summary>
            <param name="theObject">the instance handle of the modified object
            </param>
            <param name="theAttributes">the map between attribute handles and the new values of
            the identified attributes
            </param>
            <param name="userSuppliedTag">a user-supplied tag associated with the state change
            </param>
            <param name="sentOrdering">the type of ordering with which the update was sent
            </param>
            <param name="theTransport">the type of transport associated with the update
            </param>
            <param name="theTime">the logical time associated with the attribute update
            </param>
            <param name="receivedOrdering">the type of ordering with which the update was received
            </param>
            <param name="retractionHandle">the message retraction handle
            </param>
            <param name="sentRegions">the set of region handles identifying the regions associated
            with the attribute update
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance is not known
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotRecognized">  if the attribute was not recognized
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotSubscribed">  if the federate had not subscribed to the
            attribute
            </exception>
            <exception cref="T:Hla.Rti1516.InvalidLogicalTime">  if the specified logical time was invalid
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.ReceiveInteraction(Hla.Rti1516.IInteractionClassHandle,Hla.Rti1516.IParameterHandleValueMap,System.Byte[],Hla.Rti1516.OrderType,Hla.Rti1516.TransportationType)">
            <summary> 
            Notifies the federate of a received interaction.
            </summary>
            <param name="interactionClass">the class of the received interaction
            </param>
            <param name="theParameters">the map between parameter handles and the values of
            the identified parameters
            </param>
            <param name="userSuppliedTag">a user-supplied tag associated with the interaction
            </param>
            <param name="sentOrdering">the type of ordering with which the interaction was sent
            </param>
            <param name="theTransport">the type of transport associated with the interaction
            </param>
            <exception cref="T:Hla.Rti1516.InteractionClassNotRecognized">  if the interaction class was not recognized
            </exception>
            <exception cref="T:Hla.Rti1516.InteractionParameterNotRecognized">  if a parameter of the interaction was not
            recognized
            </exception>
            <exception cref="T:Hla.Rti1516.InteractionClassNotSubscribed">  if the federate had not subscribed to the
            interaction class
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.ReceiveInteraction(Hla.Rti1516.IInteractionClassHandle,Hla.Rti1516.IParameterHandleValueMap,System.Byte[],Hla.Rti1516.OrderType,Hla.Rti1516.TransportationType,Hla.Rti1516.IRegionHandleSet)">
            <summary> 
            Notifies the federate of a received interaction.
            </summary>
            <param name="interactionClass">the class of the received interaction
            </param>
            <param name="theParameters">the map between parameter handles and the values of
            the identified parameters
            </param>
            <param name="userSuppliedTag">a user-supplied tag associated with the interaction
            </param>
            <param name="sentOrdering">the type of ordering with which the interaction was sent
            </param>
            <param name="theTransport">the type of transport associated with the interaction
            </param>
            <param name="sentRegions">the set of region handles identifying the regions associated
            with the interaction
            </param>
            <exception cref="T:Hla.Rti1516.InteractionClassNotRecognized">  if the interaction class was not recognized
            </exception>
            <exception cref="T:Hla.Rti1516.InteractionParameterNotRecognized">  if a parameter of the interaction was not
            recognized
            </exception>
            <exception cref="T:Hla.Rti1516.InteractionClassNotSubscribed">  if the federate had not subscribed to the
            interaction class
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.ReceiveInteraction(Hla.Rti1516.IInteractionClassHandle,Hla.Rti1516.IParameterHandleValueMap,System.Byte[],Hla.Rti1516.OrderType,Hla.Rti1516.TransportationType,Hla.Rti1516.ILogicalTime,Hla.Rti1516.OrderType)">
            <summary>
             Notifies the federate of a received interaction.
            </summary>
            <param name="interactionClass">the class of the received interaction
            </param>
            <param name="theParameters">the map between parameter handles and the values of
            the identified parameters
            </param>
            <param name="userSuppliedTag">a user-supplied tag associated with the interaction
            </param>
            <param name="sentOrdering">the type of ordering with which the interaction was sent
            </param>
            <param name="theTransport">the type of transport associated with the interaction
            </param>
            <param name="theTime">the logical time associated with the interaction
            </param>
            <exception cref="T:Hla.Rti1516.InteractionClassNotRecognized">  if the interaction class was not recognized
            </exception>
            <exception cref="T:Hla.Rti1516.InteractionParameterNotRecognized">  if a parameter of the interaction was not
            recognized
            </exception>
            <exception cref="T:Hla.Rti1516.InteractionClassNotSubscribed">  if the federate had not subscribed to the
            interaction class
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.ReceiveInteraction(Hla.Rti1516.IInteractionClassHandle,Hla.Rti1516.IParameterHandleValueMap,System.Byte[],Hla.Rti1516.OrderType,Hla.Rti1516.TransportationType,Hla.Rti1516.ILogicalTime,Hla.Rti1516.OrderType,Hla.Rti1516.IRegionHandleSet)">
            <summary> 
            Notifies the federate of a received interaction.
            </summary>
            <param name="interactionClass">the class of the received interaction
            </param>
            <param name="theParameters">the map between parameter handles and the values of
            the identified parameters
            </param>
            <param name="userSuppliedTag">a user-supplied tag associated with the interaction
            </param>
            <param name="sentOrdering">the type of ordering with which the interaction was sent
            </param>
            <param name="theTransport">the type of transport associated with the interaction
            </param>
            <param name="theTime">the logical time associated with the interaction
            </param>
            <param name="receivedOrdering">the type of ordering with which the interaction was received
            </param>
            <param name="sentRegions">the set of region handles identifying the regions associated
            with the interaction
            </param>
            <exception cref="T:Hla.Rti1516.InteractionClassNotRecognized">  if the interaction class was not recognized
            </exception>
            <exception cref="T:Hla.Rti1516.InteractionParameterNotRecognized">  if a parameter of the interaction was not
            recognized
            </exception>
            <exception cref="T:Hla.Rti1516.InteractionClassNotSubscribed">  if the federate had not subscribed to the
            interaction class
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.ReceiveInteraction(Hla.Rti1516.IInteractionClassHandle,Hla.Rti1516.IParameterHandleValueMap,System.Byte[],Hla.Rti1516.OrderType,Hla.Rti1516.TransportationType,Hla.Rti1516.ILogicalTime,Hla.Rti1516.OrderType,Hla.Rti1516.IMessageRetractionHandle)">
            <summary> 
            Notifies the federate of a received interaction.
            </summary>
            <param name="interactionClass">the class of the received interaction
            </param>
            <param name="theParameters">the map between parameter handles and the values of
            the identified parameters
            </param>
            <param name="userSuppliedTag">a user-supplied tag associated with the interaction
            </param>
            <param name="sentOrdering">the type of ordering with which the interaction was sent
            </param>
            <param name="theTransport">the type of transport associated with the interaction
            </param>
            <param name="theTime">the logical time associated with the interaction
            </param>
            <param name="receivedOrdering">the type of ordering with which the interaction was received
            </param>
            <param name="messageRetractionHandle">the message retraction handle associated with the
            interaction
            </param>
            <exception cref="T:Hla.Rti1516.InteractionClassNotRecognized">  if the interaction class was not recognized
            </exception>
            <exception cref="T:Hla.Rti1516.InteractionParameterNotRecognized">  if a parameter of the interaction was not
            recognized
            </exception>
            <exception cref="T:Hla.Rti1516.InteractionClassNotSubscribed">  if the federate had not subscribed to the
            interaction class
            </exception>
            <exception cref="T:Hla.Rti1516.InvalidLogicalTime">  if the specified logical time was invalid
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.ReceiveInteraction(Hla.Rti1516.IInteractionClassHandle,Hla.Rti1516.IParameterHandleValueMap,System.Byte[],Hla.Rti1516.OrderType,Hla.Rti1516.TransportationType,Hla.Rti1516.ILogicalTime,Hla.Rti1516.OrderType,Hla.Rti1516.IMessageRetractionHandle,Hla.Rti1516.IRegionHandleSet)">
            <summary>
             Notifies the federate of a received interaction.
            </summary>
            <param name="interactionClass">the class of the received interaction
            </param>
            <param name="theParameters">the map between parameter handles and the values of
            the identified parameters
            </param>
            <param name="userSuppliedTag">a user-supplied tag associated with the interaction
            </param>
            <param name="sentOrdering">the type of ordering with which the interaction was sent
            </param>
            <param name="theTransport">the type of transport associated with the interaction
            </param>
            <param name="theTime">the logical time associated with the interaction
            </param>
            <param name="receivedOrdering">the type of ordering with which the interaction was received
            </param>
            <param name="messageRetractionHandle">the message retraction handle associated with the
            interaction
            </param>
            <param name="sentRegions">the set of region handles identifying the regions associated
            with the interaction
            </param>
            <exception cref="T:Hla.Rti1516.InteractionClassNotRecognized">  if the interaction class was not recognized
            </exception>
            <exception cref="T:Hla.Rti1516.InteractionParameterNotRecognized">  if a parameter of the interaction was not
            recognized
            </exception>
            <exception cref="T:Hla.Rti1516.InteractionClassNotSubscribed">  if the federate had not subscribed to the
            interaction class
            </exception>
            <exception cref="T:Hla.Rti1516.InvalidLogicalTime">  if the specified logical time was invalid
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.RemoveObjectInstance(Hla.Rti1516.IObjectInstanceHandle,System.Byte[],Hla.Rti1516.OrderType)">
            <summary>
             Notifies the federate that an object instance has been removed.
            </summary>
            <param name="theObject">the instance handle associated with the object
            </param>
            <param name="userSuppliedTag">a user-supplied tag associated with the removal operation
            </param>
            <param name="sentOrdering">the type of ordering with which the interaction was sent
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance was unknown
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.RemoveObjectInstance(Hla.Rti1516.IObjectInstanceHandle,System.Byte[],Hla.Rti1516.OrderType,Hla.Rti1516.ILogicalTime,Hla.Rti1516.OrderType)">
            <summary> 
            Notifies the federate that an object instance has been removed.
            </summary>
            <param name="theObject">the instance handle associated with the object
            </param>
            <param name="userSuppliedTag">a user-supplied tag associated with the removal operation
            </param>
            <param name="sentOrdering">the type of ordering with which the interaction was sent
            </param>
            <param name="theTime">the logical time associated with the removal operation
            </param>
            <param name="receivedOrdering">the type of ordering with which the interaction was received
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance was unknown
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.RemoveObjectInstance(Hla.Rti1516.IObjectInstanceHandle,System.Byte[],Hla.Rti1516.OrderType,Hla.Rti1516.ILogicalTime,Hla.Rti1516.OrderType,Hla.Rti1516.IMessageRetractionHandle)">
            <summary> 
            Notifies the federate that an object instance has been removed.
            </summary>
            <param name="theObject">the instance handle associated with the object
            </param>
            <param name="userSuppliedTag">a user-supplied tag associated with the removal operation
            </param>
            <param name="sentOrdering">the type of ordering with which the interaction was sent
            </param>
            <param name="theTime">the logical time associated with the removal operation
            </param>
            <param name="receivedOrdering">the type of ordering with which the interaction was received
            </param>
            <param name="retractionHandle">the message retraction handle associated with the interaction
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance was unknown
            </exception>
            <exception cref="T:Hla.Rti1516.InvalidLogicalTime">  if the specified logical time was invalid
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.AttributesInScope(Hla.Rti1516.IObjectInstanceHandle,Hla.Rti1516.IAttributeHandleSet)">
            <summary> 
            Notifies the federate that a set of attributes have entered its scope.
            </summary>
            <param name="theObject">the handle of the object instance whose attributes have entered
            scope
            </param>
            <param name="theAttributes">the set of attribute handles identifying the attributes that
            have entered scope
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance was unknown
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotRecognized">  if an identified attribute was not recognized
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotSubscribed">  if the federate had not subscribed to an identified
            attribute
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.AttributesOutOfScope(Hla.Rti1516.IObjectInstanceHandle,Hla.Rti1516.IAttributeHandleSet)">
            <summary> 
            Notifies the federate that a set of attributes have left its scope.
            </summary>
            <param name="theObject">the handle of the object instance whose attributes have left
            scope
            </param>
            <param name="theAttributes">the set of attribute handles identifying the attributes that
            have left scope
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance was unknown
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotRecognized">  if an identified attribute was not recognized
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotSubscribed">  if the federate had not subscribed to an identified
            attribute
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.ProvideAttributeValueUpdate(Hla.Rti1516.IObjectInstanceHandle,Hla.Rti1516.IAttributeHandleSet,System.Byte[])">
            <summary> 
            Notifies the federate that it should provide an update regarding a set of object
            attributes.
            </summary>
            <param name="theObject">the handle of the object instance whose attributes should be sent
            </param>
            <param name="theAttributes">the set of attribute handles identifying the attributes that
            should be sent
            </param>
            <param name="userSuppliedTag">a user-supplied tag associated with the operation
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance was unknown
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotRecognized">  if an identified attribute was not recognized
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotOwned">  if the federate did not own a specified attribute
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.TurnUpdatesOnForObjectInstance(Hla.Rti1516.IObjectInstanceHandle,Hla.Rti1516.IAttributeHandleSet)">
            <summary> 
            Notifies the federate that it should turn updates on for an owned object instance.
            </summary>
            <param name="theObject">the handle of the object instance whose attributes should be sent
            </param>
            <param name="theAttributes">the set of attribute handles identifying the attributes that
            should be sent
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance was unknown
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotRecognized">  if an identified attribute was not recognized
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotOwned">  if the federate did not own a specified attribute
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.TurnUpdatesOffForObjectInstance(Hla.Rti1516.IObjectInstanceHandle,Hla.Rti1516.IAttributeHandleSet)">
            <summary> 
            Notifies the federate that it should turn updates off for an owned object instance.
            </summary>
            <param name="theObject">the handle of the object instance whose attributes should not be sent
            </param>
            <param name="theAttributes">the set of attribute handles identifying the attributes that
            should not be sent
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance was unknown
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotRecognized">  if an identified attribute was not recognized
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotOwned">  if the federate did not own a specified attribute
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.RequestAttributeOwnershipAssumption(Hla.Rti1516.IObjectInstanceHandle,Hla.Rti1516.IAttributeHandleSet,System.Byte[])">
            <summary>
             Requests that the federate assume ownership of a set of attributes.
            </summary>
            <param name="theObject">a handle to the object instance with which the attributes are
            associated
            </param>
            <param name="offeredAttributes">the set of handles to the attributes
            </param>
            <param name="userSuppliedTag">a user-supplied tag associated with the transfer
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance was unknown
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotRecognized">  if an attribute was not recognized
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeAlreadyOwned">  if an attribute was already owned
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotPublished">  if an attribute is not published
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.RequestDivestitureConfirmation(Hla.Rti1516.IObjectInstanceHandle,Hla.Rti1516.IAttributeHandleSet)">
            <summary> 
            Requests that the federate confirm divestiture of a set of attributes.
            </summary>
            <param name="theObject">a handle to the object instance with which the attributes are
            associated
            </param>
            <param name="offeredAttributes">the set of handles to the attributes
            </param>
            <param name="userSuppliedTag">a user-supplied tag associated with the transfer
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance was unknown
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotRecognized">  if an attribute was not recognized
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotOwned">  if an attribute was not owned
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeDivestitureWasNotRequested">  if divestiture of a specified
            attribute was not requested
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.AttributeOwnershipAcquisitionNotification(Hla.Rti1516.IObjectInstanceHandle,Hla.Rti1516.IAttributeHandleSet,System.Byte[])">
            <summary> 
            Notifies the federate that it has acquired ownership of a set of attributes.
            </summary>
            <param name="theObject">a handle to the object instance with which the attributes are
            associated
            </param>
            <param name="securedAttributes">the set of handles to the attributes
            </param>
            <param name="userSuppliedTag">a user-supplied tag associated with the transfer
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance was unknown
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotRecognized">  if an attribute was not recognized
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeAcquisitionWasNotRequested">  if acquisition of a specified
            attribute was not requested
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeAlreadyOwned">  if an attribute was already owned
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotPublished">  if an attribute is not published
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.AttributeOwnershipUnavailable(Hla.Rti1516.IObjectInstanceHandle,Hla.Rti1516.IAttributeHandleSet)">
            <summary> 
            Notifies the federate that ownership of a set of attributes is unavailable.
            </summary>
            <param name="theObject">a handle to the object instance with which the attributes are
            associated
            </param>
            <param name="theAttributes">the set of handles to the attributes
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance was unknown
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotRecognized">  if an attribute was not recognized
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeAlreadyOwned">  if an attribute was already owned
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeAcquisitionWasNotRequested">  if acquisition of a specified
            attribute was not requested
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.RequestAttributeOwnershipRelease(Hla.Rti1516.IObjectInstanceHandle,Hla.Rti1516.IAttributeHandleSet,System.Byte[])">
            <summary> 
            Notifies the federate of a request to release ownership of a set of attributes.
            </summary>
            <param name="theObject">a handle to the object instance with which the attributes are
            associated
            </param>
            <param name="candidateAttributes">the attributes that have been requested to be released
            </param>
            <param name="userSuppliedTag">a user-supplied tag associated with the request
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance was unknown
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotRecognized"> if an attribute was not recognized
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotOwned"> if an attribute was not owned
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.ConfirmAttributeOwnershipAcquisitionCancellation(Hla.Rti1516.IObjectInstanceHandle,Hla.Rti1516.IAttributeHandleSet)">
            <summary> 
            Notifies the federate of confirmation of attribute ownership acquisition cancellation.
            </summary>
            <param name="theObject">a handle to the object instance with which the attributes are
            associated
            </param>
            <param name="theAttributes">a set of handles to the attributes
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance was unknown
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotRecognized"> if an attribute was not recognized
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeAlreadyOwned"> if an attribute was already owned
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeAcquisitionWasNotCanceled"> if the attribute acquisition operation
            was not canceled
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.InformAttributeOwnership(Hla.Rti1516.IObjectInstanceHandle,Hla.Rti1516.IAttributeHandle,Hla.Rti1516.IFederateHandle)">
            <summary> 
            Notifies the federate of the ownership of an attribute.
            </summary>
            <param name="theObject">a handle to the object instance with which the attribute is
            associated
            </param>
            <param name="theAttribute">a handle to the attribute
            </param>
            <param name="theOwner">a handle to the owner of the attribute
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance was unknown
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotRecognized"> if the attribute was not recognized
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.AttributeIsNotOwned(Hla.Rti1516.IObjectInstanceHandle,Hla.Rti1516.IAttributeHandle)">
            <summary>
             Notifies the federate that an attribute if not owned.
            </summary>
            <param name="theObject">a handle to the object instance with which the attribute is
            associated
            </param>
            <param name="theAttribute">a handle to the attribute
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance was unknown
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotRecognized"> if the attribute was not recognized
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.AttributeIsOwnedByRTI(Hla.Rti1516.IObjectInstanceHandle,Hla.Rti1516.IAttributeHandle)">
            <summary> 
            Notifies the federate that an attribute is owned by the run-time infrastructure.
            </summary>
            <param name="theObject">a handle to the object instance with which the attribute is
            associated
            </param>
            <param name="theAttribute">a handle to the attribute
            </param>
            <exception cref="T:Hla.Rti1516.ObjectInstanceNotKnown">  if the object instance was unknown
            </exception>
            <exception cref="T:Hla.Rti1516.AttributeNotRecognized"> if the attribute was not recognized
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.TimeRegulationEnabled(Hla.Rti1516.ILogicalTime)">
            <summary> 
            Notifies the federate that time regulation has been enabled.
            </summary>
            <param name="time">the current logical time
            </param>
            <exception cref="T:Hla.Rti1516.InvalidLogicalTime"> if the specified logical time was invalid
            </exception>
            <exception cref="T:Hla.Rti1516.NoRequestToEnableTimeRegulationWasPending"> if no request to
            enable time regulation was pending
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.TimeConstrainedEnabled(Hla.Rti1516.ILogicalTime)">
            <summary> 
            Notifies the federate that time-constrained mode has been enabled.
            </summary>
            <param name="time">the current logical time
            </param>
            <exception cref="T:Hla.Rti1516.InvalidLogicalTime"> if the specified logical time was invalid
            </exception>
            <exception cref="T:Hla.Rti1516.NoRequestToEnableTimeConstrainedWasPending"> if no request to
            enable time-constrained mode was pending
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.TimeAdvanceGrant(Hla.Rti1516.ILogicalTime)">
            <summary> 
            Notifies the federate that a time advance has been granted.
            </summary>
            <param name="theTime">the new logical time
            </param>
            <exception cref="T:Hla.Rti1516.InvalidLogicalTime"> if the specified logical time is invalid
            </exception>
            <exception cref="T:Hla.Rti1516.JoinedFederateIsNotInTimeAdvancingState"> if the federate is not
            in a time advancing state
            </exception>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="M:Hla.Rti1516.IFederateAmbassador.RequestRetraction(Hla.Rti1516.IMessageRetractionHandle)">
            <summary> 
            Notifies the federate that a retraction has been requested.
            </summary>
            <param name="theHandle">the handle identifying the message to be retracted
            </param>
            <exception cref="T:Hla.Rti1516.FederateInternalError">  if an error occurs in the federate
            </exception>
        </member>
        <member name="T:Hla.Rti1516.IAttributeHandle">
            <summary> 
            Type-safe handle for an attribute.  Generally these are created by the
            RTI and passed to the user.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.IAttributeHandle.Equals(System.Object)">
            <summary> 
            Checks this attribute handle for equality with another.
            </summary>
            <param name="otherAttributeHandle">the other attribute handle to compare this
            to
            </param>
            <returns> <code>true</code> if this refers to the same attribute as the 
            other handle, <code>false</code> otherwise
            </returns>
        </member>
        <member name="M:Hla.Rti1516.IAttributeHandle.GetHashCode">
            <summary> 
            Computes and returns the hash code of this attribute handle.
            </summary>
            <returns> the hash code corresponding to this attribute handle
            </returns>
        </member>
        <member name="M:Hla.Rti1516.IAttributeHandle.EncodedLength">
            <summary>
             Returns the encoded length of this attribute handle.
            </summary>
            <returns> the encoded length of this attribute handle, in bytes
            </returns>
        </member>
        <member name="M:Hla.Rti1516.IAttributeHandle.Encode(System.Byte[],System.Int32)">
            <summary> 
            Encodes this attribute handle, placing the result into the specified
            array.
            </summary>
            <param name="buffer">the buffer in which to place the encoded handle
            </param>
            <param name="offset">the buffer offset at which to store the data
            </param>
        </member>
        <member name="M:Hla.Rti1516.IAttributeHandle.ToString">
            <summary> 
            Returns a string representation of this attribute handle.
            </summary>
            <returns> a string representation of this attribute handle
            </returns>
        </member>
        <member name="T:Hla.Rti1516.AttributeScopeAdvisorySwitchIsOn">
            <summary> 
            An exception thrown when the attribute scope advisory switch is on.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.AttributeScopeAdvisorySwitchIsOn.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.ObjectClassRelevanceAdvisorySwitchIsOn">
            <summary> 
            An exception indicating that the object class relevance advisory switch is on.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.ObjectClassRelevanceAdvisorySwitchIsOn.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.MobileFederateServices">
            <summary> 
            Conveys the interfaces for all services that a federate
            must supply and which may not execute in the federate's
            space.
            </summary>
        </member>
        <member name="F:Hla.Rti1516.MobileFederateServices._timeFactory">
            <summary> The logical time factory.</summary>
        </member>
        <member name="F:Hla.Rti1516.MobileFederateServices._intervalFactory">
            <summary> The logical time interval factory.</summary>
        </member>
        <member name="M:Hla.Rti1516.MobileFederateServices.#ctor(Hla.Rti1516.ILogicalTimeFactory,Hla.Rti1516.ILogicalTimeIntervalFactory)">
            <summary> 
            Constructor.
            </summary>
            <param name="timeFactory">the logical time factory
            </param>
            <param name="intervalFactory">the logical time interval factory
            </param>
        </member>
        <member name="T:Hla.Rti1516.IObjectInstanceHandle">
            <summary> 
            Type-safe handle for an object instance.  Generally these are created by the
            run-time infrastructure and passed to the user.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.IObjectInstanceHandle.Equals(System.Object)">
            <summary> 
            Checks this object instance handle for equality with another.
            </summary>
            <param name="otherObjectInstanceHandle">the other object instance handle
            </param>
            <returns> <code>true</code> if the two handles refer to the same
            object instance, <code>false</code> otherwise
            </returns>
        </member>
        <member name="M:Hla.Rti1516.IObjectInstanceHandle.GetHashCode">
            <summary> 
            Computes and returns a hash code corresponding to this object
            instance handle.
            </summary>
            <returns> a hash code corresponding to this object instance handle
            </returns>
        </member>
        <member name="M:Hla.Rti1516.IObjectInstanceHandle.EncodedLength">
            <summary> 
            Returns the encoded length of this object instance handle.
            </summary>
            <returns> the encoded length of this object instance handle
            </returns>
        </member>
        <member name="M:Hla.Rti1516.IObjectInstanceHandle.Encode(System.Byte[],System.Int32)">
            <summary> 
            Encodes this object instance handle, placing the result into the
            specified buffer.
            </summary>
            <param name="buffer">the buffer in which to place the encoded value
            </param>
            <param name="offset">the offset within the buffer at which to store the
            value
            </param>
        </member>
        <member name="M:Hla.Rti1516.IObjectInstanceHandle.ToString">
            <summary> 
            Returns a string representation of this object instance handle.
            </summary>
            <returns> a string representaiton of this object instance handle
            </returns>
        </member>
        <member name="T:Hla.Rti1516.InvalidTransportationType">
            <summary> 
            An exception indicating an invalid transportation type.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.InvalidTransportationType.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.InvalidTransportationName">
            <summary> 
            An exception indicating an invalid transportation name.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.InvalidTransportationName.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.InvalidRegionContext">
            <summary> 
            An exception indicating an invalid region context.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.InvalidRegionContext.#ctor(System.String)">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.InvalidFederateHandle">
            <summary> 
            An exception indicating an invalid federate handle.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.InvalidFederateHandle.#ctor">
            <summary> 
            Constructor.
            </summary>
            <param name="msg">a detailed description of the exception
            </param>
        </member>
        <member name="T:Hla.Rti1516.FederationExecutionDoesNotExist">
            <summary>
             An exception indicating that the federation execution does not exist.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.FederationExecutionDoesNotExist.#ctor">
            <summary> 
            Initializes a new instance of the FederationExecutionDoesNotExist class. 
            </summary>
        </member>
        <member name="M:Hla.Rti1516.FederationExecutionDoesNotExist.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the FederationExecutionDoesNotExist class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error. 
            </param>
        </member>
        <member name="M:Hla.Rti1516.FederationExecutionDoesNotExist.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the FederationExecutionDoesNotExist class with a specified error message and
            a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">a detailed description of the exception</param>
            <param name="inner"> The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="M:Hla.Rti1516.FederationExecutionDoesNotExist.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the FederationExecutionDoesNotExist class with serialized data. 
            </summary>
            <param name="info">The <code>SerializationInfo</code> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <code>StreamingContext</code> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Hla.Rti1516.DeletePrivilegeNotHeld">
            <summary> 
            An exception indicating that the Delete privilege is not held.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.DeletePrivilegeNotHeld.#ctor">
            <summary> 
            Initializes a new instance of the DeletePrivilegeNotHeld class. 
            </summary>
        </member>
        <member name="M:Hla.Rti1516.DeletePrivilegeNotHeld.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the DeletePrivilegeNotHeld class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error. 
            </param>
        </member>
        <member name="M:Hla.Rti1516.DeletePrivilegeNotHeld.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DeletePrivilegeNotHeld class with a specified error message and
            a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">a detailed description of the exception</param>
            <param name="inner"> The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="M:Hla.Rti1516.DeletePrivilegeNotHeld.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the DeletePrivilegeNotHeld class with serialized data. 
            </summary>
            <param name="info">The <code>SerializationInfo</code> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <code>StreamingContext</code> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Hla.Rti1516.AttributeAlreadyBeingDivested">
            <summary> 
            An exception thrown when an attribute is already being divested.
            </summary>
        </member>
        <member name="M:Hla.Rti1516.AttributeAlreadyBeingDivested.#ctor">
            <summary> 
            Initializes a new instance of the AttributeAlreadyBeingDivested class. 
            </summary>
        </member>
        <member name="M:Hla.Rti1516.AttributeAlreadyBeingDivested.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the AttributeAlreadyBeingDivested class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error. 
            </param>
        </member>
        <member name="M:Hla.Rti1516.AttributeAlreadyBeingDivested.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the AttributeAlreadyBeingDivested class with a specified
            error message and
            a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">a detailed description of the exception</param>
            <param name="inner"> The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="M:Hla.Rti1516.AttributeAlreadyBeingDivested.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the AttributeAlreadyBeingDivested class with serialized data. 
            </summary>
            <param name="info">The <code>SerializationInfo</code> that holds the serialized object data 
            about the exception being thrown.
            </param>
            <param name="context">The <code>StreamingContext</code> that contains contextual information
            about the source or destination.
            </param>
        </member>
    </members>
</doc>
