using System;

using Hla.Rti1516;
using Sxta.Rti1516.Reflection;
using Sxta.Rti1516.Serializers.XrtiEncoding;
using Sxta.Rti1516.BoostrapProtocol;
using Sxta.Rti1516.Interactions;
using Sxta.Rti1516.XrtiHandles;

namespace ExternalSamples
{
    ///<summary>
    ///Autogenerated interaction and serializer registration Helper. 
    ///</summary>
    /// <author> Sxta1516.DynamicCompiler.DynamicCompiler from Hello World Object Model </author>
    [HLAinteractionHelperAttribute(Name = "HelloWorldObjectModelInteractionHelper",
                                    FomName = "External Samples Object Model",
                                     Semantics = "A Listener Manager and serializer manager")]
    public class HelloWorldObjectModelInteractionHelper
    {
        InteractionManager manager;

        /// <summary>Constructor.</summary>
        /// <param name="interactionManager"> the run-time interaction manager</param>
        public HelloWorldObjectModelInteractionHelper(InteractionManager interactionManager)
        {
            Type objType;
            manager = interactionManager;
            XrtiSerializerManager serializerMngr = manager.SerializerManager;
            long handle;
            ObjectClassDescriptor ocd;


            ocd = manager.DescriptorManager.GetObjectClassDescriptor("ExternalCountry");
            handle = ((XRTIAttributeHandle)ocd.GetAttributeDescriptor("Name").Handle).Identifier;
            serializerMngr.RegisterSerializer(null, handle, new ExternalCountryPropertyNameXrtiSerializer(serializerMngr));

            handle = ((XRTIAttributeHandle)ocd.GetAttributeDescriptor("Population").Handle).Identifier;
            serializerMngr.RegisterSerializer(null, handle, new ExternalCountryPropertyPopulationXrtiSerializer(serializerMngr));

            handle = ((XRTIAttributeHandle)ocd.GetAttributeDescriptor("Position").Handle).Identifier;
            serializerMngr.RegisterSerializer(null, handle, new ExternalCountryPropertyPositionXrtiSerializer(serializerMngr));

            /*
            ocd = manager.DescriptorManager.GetObjectClassDescriptor("Boid");
            handle = ((XRTIAttributeHandle)ocd.GetAttributeDescriptor("Position").Handle).Identifier;
            serializerMngr.RegisterSerializer(null, handle, new BoidPropertyPositionXrtiSerializer(serializerMngr));

            handle = ((XRTIAttributeHandle)ocd.GetAttributeDescriptor("Velocity").Handle).Identifier;
            serializerMngr.RegisterSerializer(null, handle, new BoidPropertyVelocityXrtiSerializer(serializerMngr));

            objType = typeof(HLAinteractionRootMessage);
            manager.AddReceiveInteractionDelegate(objType, "HLAinteractionRoot", new InteractionManager.ReceiveInteractionDelegate(this.ReceiveInteraction));
            handle = ((XRTIInteractionClassHandle)manager.DescriptorManager.GetInteractionClassDescriptor("HLAinteractionRoot").Handle).Identifier;
            serializerMngr.RegisterSerializer(objType, handle, new HLAinteractionRootMessageXrtiSerializer(serializerMngr));

            */
            objType = typeof(CommunicationMessage);
            manager.AddReceiveInteractionDelegate(objType, "Communication", new InteractionManager.ReceiveInteractionDelegate(this.ReceiveInteraction));
            handle = ((XRTIInteractionClassHandle)manager.DescriptorManager.GetInteractionClassDescriptor("Communication").Handle).Identifier;
            serializerMngr.RegisterSerializer(objType, handle, new CommunicationMessageXrtiSerializer(serializerMngr));
        }

        /// <summary>Notifies the listener of a received interaction.</summary>
        /// <param name="msg"> the message of the received interaction</param>
        public void ReceiveInteraction(BaseInteractionMessage msg)
        {
            try
            {
                if (msg is CommunicationMessage)
                {
                    foreach (IInteractionListener il in manager.InteractionListeners)
                    {
                        if (il is IExternalSamplesObjectModelInteractionListener)
                            (il as IExternalSamplesObjectModelInteractionListener).OnReceiveCommunication(msg as CommunicationMessage);
                        else
                            il.ReceiveInteraction(msg);
                    }
                }
                else
                    foreach (IInteractionListener il in manager.InteractionListeners)
                    {
                        il.ReceiveInteraction(msg);
                    }
            }
            catch (System.IO.IOException ioe)
            {
                throw new FederateInternalError(ioe.ToString());
            }
        }
    }

    ///<summary>
    ///Autogenerated interaction listener interface. 
    ///</summary>
    /// <author> Sxta.Rti1516.DynamicCompiler.DynamicCompiler from External Samples Object Model </author>
    public interface IExternalSamplesObjectModelInteractionListener : IInteractionListener
    {
        ///<summary>
        ///A generic message. 
        ///</summary>
        ///<param name="msg"> the message associated with the interaction</param>
        ///<exception cref="InteractionClassNotRecognized"> if the interaction class was not recognized</exception>
        ///<exception cref="InteractionParameterNotRecognized"> if a parameter of the interaction was not
        /// recognized</exception>
        ///<exception cref="InteractionClassNotSubscribed"> if the federate had not subscribed to the
        /// interaction class</exception>
        ///<exception cref="FederateInternalError"> if an error occurs in the federate</exception>
        void OnReceiveCommunication(CommunicationMessage msg);

    }
}
